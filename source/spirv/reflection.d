
/*
    Copyright Â© 2024, Inochi2D Project
    Distributed under the 2-Clause BSD License, see LICENSE file.
    
    Authors: Luna Nielsen

    This code is auto-generated by gen-spv-reflection, do not edit manually.
*/
module spirv.reflection;
import spirv.spv;

import numem.all;

enum OpClass {

    cMiscellaneous,
    cDebug,
    cAnnotation,
    cExtension,
    cModeSetting,
    cTypeDeclaration,
    cConstantCreation,
    cMemory,
    cFunction,
    cImage,
    cConversion,
    cComposite,
    cArithmetic,
    cBit,
    cRelationalandLogical,
    cDerivative,
    cControlFlow,
    cAtomic,
    cPrimitive,
    cBarrier,
    cGroup,
    cDeviceSideEnqueue,
    cPipe,
    cNonUniform,
    cReserved,
    cUnknown,
}

/**
    Gets whether [Op] is of the Miscellaneous Instructions class.
*/
bool isMiscellaneous(Op code) @nogc {
    return getClass(code) == OpClass.cMiscellaneous;
}

/**
    Gets whether [Op] is of the Debug Instructions class.
*/
bool isDebug(Op code) @nogc {
    return getClass(code) == OpClass.cDebug;
}

/**
    Gets whether [Op] is of the Annotation Instructions class.
*/
bool isAnnotation(Op code) @nogc {
    return getClass(code) == OpClass.cAnnotation;
}

/**
    Gets whether [Op] is of the Extension Instructions class.
*/
bool isExtension(Op code) @nogc {
    return getClass(code) == OpClass.cExtension;
}

/**
    Gets whether [Op] is of the Mode-Setting Instructions class.
*/
bool isModeSetting(Op code) @nogc {
    return getClass(code) == OpClass.cModeSetting;
}

/**
    Gets whether [Op] is of the Type-Declaration Instructions class.
*/
bool isTypeDeclaration(Op code) @nogc {
    return getClass(code) == OpClass.cTypeDeclaration;
}

/**
    Gets whether [Op] is of the Constant-Creation Instructions class.
*/
bool isConstantCreation(Op code) @nogc {
    return getClass(code) == OpClass.cConstantCreation;
}

/**
    Gets whether [Op] is of the Memory Instructions class.
*/
bool isMemory(Op code) @nogc {
    return getClass(code) == OpClass.cMemory;
}

/**
    Gets whether [Op] is of the Function Instructions class.
*/
bool isFunction(Op code) @nogc {
    return getClass(code) == OpClass.cFunction;
}

/**
    Gets whether [Op] is of the Image Instructions class.
*/
bool isImage(Op code) @nogc {
    return getClass(code) == OpClass.cImage;
}

/**
    Gets whether [Op] is of the Conversion Instructions class.
*/
bool isConversion(Op code) @nogc {
    return getClass(code) == OpClass.cConversion;
}

/**
    Gets whether [Op] is of the Composite Instructions class.
*/
bool isComposite(Op code) @nogc {
    return getClass(code) == OpClass.cComposite;
}

/**
    Gets whether [Op] is of the Arithmetic Instructions class.
*/
bool isArithmetic(Op code) @nogc {
    return getClass(code) == OpClass.cArithmetic;
}

/**
    Gets whether [Op] is of the Bit Instructions class.
*/
bool isBit(Op code) @nogc {
    return getClass(code) == OpClass.cBit;
}

/**
    Gets whether [Op] is of the Relational and Logical Instructions class.
*/
bool isRelationalandLogical(Op code) @nogc {
    return getClass(code) == OpClass.cRelationalandLogical;
}

/**
    Gets whether [Op] is of the Derivative Instructions class.
*/
bool isDerivative(Op code) @nogc {
    return getClass(code) == OpClass.cDerivative;
}

/**
    Gets whether [Op] is of the Control-Flow Instructions class.
*/
bool isControlFlow(Op code) @nogc {
    return getClass(code) == OpClass.cControlFlow;
}

/**
    Gets whether [Op] is of the Atomic Instructions class.
*/
bool isAtomic(Op code) @nogc {
    return getClass(code) == OpClass.cAtomic;
}

/**
    Gets whether [Op] is of the Primitive Instructions class.
*/
bool isPrimitive(Op code) @nogc {
    return getClass(code) == OpClass.cPrimitive;
}

/**
    Gets whether [Op] is of the Barrier Instructions class.
*/
bool isBarrier(Op code) @nogc {
    return getClass(code) == OpClass.cBarrier;
}

/**
    Gets whether [Op] is of the Group and Subgroup Instructions class.
*/
bool isGroup(Op code) @nogc {
    return getClass(code) == OpClass.cGroup;
}

/**
    Gets whether [Op] is of the Device-Side Enqueue Instructions class.
*/
bool isDeviceSideEnqueue(Op code) @nogc {
    return getClass(code) == OpClass.cDeviceSideEnqueue;
}

/**
    Gets whether [Op] is of the Pipe Instructions class.
*/
bool isPipe(Op code) @nogc {
    return getClass(code) == OpClass.cPipe;
}

/**
    Gets whether [Op] is of the Non-Uniform Instructions class.
*/
bool isNonUniform(Op code) @nogc {
    return getClass(code) == OpClass.cNonUniform;
}

/**
    Gets whether [Op] is of the Reserved Instructions class.
*/
bool isReserved(Op code) @nogc {
    return getClass(code) == OpClass.cReserved;
}

/**
    Gets whether [Op] is of the specified opcode class.
*/
OpClass getClass(Op code) @nogc {
    switch (code) {
        default:
            return OpClass.cUnknown;
        
        case Op.OpNop:
        case Op.OpUndef:
        case Op.OpSizeOf:
        case Op.OpCooperativeMatrixLengthKHR:
        case Op.OpAssumeTrueKHR:
        case Op.OpExpectKHR:
            return OpClass.cMiscellaneous;
        case Op.OpSourceContinued:
        case Op.OpSource:
        case Op.OpSourceExtension:
        case Op.OpName:
        case Op.OpMemberName:
        case Op.OpString:
        case Op.OpLine:
        case Op.OpNoLine:
        case Op.OpModuleProcessed:
            return OpClass.cDebug;
        case Op.OpDecorate:
        case Op.OpMemberDecorate:
        case Op.OpDecorationGroup:
        case Op.OpGroupDecorate:
        case Op.OpGroupMemberDecorate:
        case Op.OpDecorateId:
        case Op.OpDecorateString:
        case Op.OpMemberDecorateString:
            return OpClass.cAnnotation;
        case Op.OpExtension:
        case Op.OpExtInstImport:
        case Op.OpExtInst:
        case Op.OpExtInstWithForwardRefsKHR:
            return OpClass.cExtension;
        case Op.OpMemoryModel:
        case Op.OpEntryPoint:
        case Op.OpExecutionMode:
        case Op.OpCapability:
        case Op.OpExecutionModeId:
            return OpClass.cModeSetting;
        case Op.OpTypeVoid:
        case Op.OpTypeBool:
        case Op.OpTypeInt:
        case Op.OpTypeFloat:
        case Op.OpTypeVector:
        case Op.OpTypeMatrix:
        case Op.OpTypeImage:
        case Op.OpTypeSampler:
        case Op.OpTypeSampledImage:
        case Op.OpTypeArray:
        case Op.OpTypeRuntimeArray:
        case Op.OpTypeStruct:
        case Op.OpTypeOpaque:
        case Op.OpTypePointer:
        case Op.OpTypeFunction:
        case Op.OpTypeEvent:
        case Op.OpTypeDeviceEvent:
        case Op.OpTypeReserveId:
        case Op.OpTypeQueue:
        case Op.OpTypePipe:
        case Op.OpTypeForwardPointer:
        case Op.OpTypePipeStorage:
        case Op.OpTypeNamedBarrier:
        case Op.OpTypeUntypedPointerKHR:
        case Op.OpTypeCooperativeMatrixKHR:
        case Op.OpTypeRayQueryKHR:
        case Op.OpTypeHitObjectNV:
        case Op.OpTypeAccelerationStructureKHR:
        case Op.OpTypeCooperativeMatrixNV:
        case Op.OpTypeBufferSurfaceINTEL:
        case Op.OpTypeStructContinuedINTEL:
            return OpClass.cTypeDeclaration;
        case Op.OpConstantTrue:
        case Op.OpConstantFalse:
        case Op.OpConstant:
        case Op.OpConstantComposite:
        case Op.OpConstantSampler:
        case Op.OpConstantNull:
        case Op.OpSpecConstantTrue:
        case Op.OpSpecConstantFalse:
        case Op.OpSpecConstant:
        case Op.OpSpecConstantComposite:
        case Op.OpSpecConstantOp:
        case Op.OpConstantCompositeReplicateEXT:
        case Op.OpSpecConstantCompositeReplicateEXT:
        case Op.OpConstantCompositeContinuedINTEL:
        case Op.OpSpecConstantCompositeContinuedINTEL:
            return OpClass.cConstantCreation;
        case Op.OpVariable:
        case Op.OpImageTexelPointer:
        case Op.OpLoad:
        case Op.OpStore:
        case Op.OpCopyMemory:
        case Op.OpCopyMemorySized:
        case Op.OpAccessChain:
        case Op.OpInBoundsAccessChain:
        case Op.OpPtrAccessChain:
        case Op.OpArrayLength:
        case Op.OpGenericPtrMemSemantics:
        case Op.OpInBoundsPtrAccessChain:
        case Op.OpPtrEqual:
        case Op.OpPtrNotEqual:
        case Op.OpPtrDiff:
        case Op.OpUntypedVariableKHR:
        case Op.OpUntypedAccessChainKHR:
        case Op.OpUntypedInBoundsAccessChainKHR:
        case Op.OpUntypedPtrAccessChainKHR:
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
        case Op.OpUntypedArrayLengthKHR:
        case Op.OpUntypedPrefetchKHR:
        case Op.OpCooperativeMatrixLoadKHR:
        case Op.OpCooperativeMatrixStoreKHR:
        case Op.OpRawAccessChainNV:
        case Op.OpMaskedGatherINTEL:
        case Op.OpMaskedScatterINTEL:
            return OpClass.cMemory;
        case Op.OpFunction:
        case Op.OpFunctionParameter:
        case Op.OpFunctionEnd:
        case Op.OpFunctionCall:
            return OpClass.cFunction;
        case Op.OpSampledImage:
        case Op.OpImageSampleImplicitLod:
        case Op.OpImageSampleExplicitLod:
        case Op.OpImageSampleDrefImplicitLod:
        case Op.OpImageSampleDrefExplicitLod:
        case Op.OpImageSampleProjImplicitLod:
        case Op.OpImageSampleProjExplicitLod:
        case Op.OpImageSampleProjDrefImplicitLod:
        case Op.OpImageSampleProjDrefExplicitLod:
        case Op.OpImageFetch:
        case Op.OpImageGather:
        case Op.OpImageDrefGather:
        case Op.OpImageRead:
        case Op.OpImageWrite:
        case Op.OpImage:
        case Op.OpImageQueryFormat:
        case Op.OpImageQueryOrder:
        case Op.OpImageQuerySizeLod:
        case Op.OpImageQuerySize:
        case Op.OpImageQueryLod:
        case Op.OpImageQueryLevels:
        case Op.OpImageQuerySamples:
        case Op.OpImageSparseSampleImplicitLod:
        case Op.OpImageSparseSampleExplicitLod:
        case Op.OpImageSparseSampleDrefImplicitLod:
        case Op.OpImageSparseSampleDrefExplicitLod:
        case Op.OpImageSparseSampleProjImplicitLod:
        case Op.OpImageSparseSampleProjExplicitLod:
        case Op.OpImageSparseSampleProjDrefImplicitLod:
        case Op.OpImageSparseSampleProjDrefExplicitLod:
        case Op.OpImageSparseFetch:
        case Op.OpImageSparseGather:
        case Op.OpImageSparseDrefGather:
        case Op.OpImageSparseTexelsResident:
        case Op.OpImageSparseRead:
        case Op.OpColorAttachmentReadEXT:
        case Op.OpDepthAttachmentReadEXT:
        case Op.OpStencilAttachmentReadEXT:
        case Op.OpImageSampleWeightedQCOM:
        case Op.OpImageBoxFilterQCOM:
        case Op.OpImageBlockMatchSSDQCOM:
        case Op.OpImageBlockMatchSADQCOM:
        case Op.OpImageBlockMatchWindowSSDQCOM:
        case Op.OpImageBlockMatchWindowSADQCOM:
        case Op.OpImageBlockMatchGatherSSDQCOM:
        case Op.OpImageBlockMatchGatherSADQCOM:
        case Op.OpImageSampleFootprintNV:
            return OpClass.cImage;
        case Op.OpConvertFToU:
        case Op.OpConvertFToS:
        case Op.OpConvertSToF:
        case Op.OpConvertUToF:
        case Op.OpUConvert:
        case Op.OpSConvert:
        case Op.OpFConvert:
        case Op.OpQuantizeToF16:
        case Op.OpConvertPtrToU:
        case Op.OpSatConvertSToU:
        case Op.OpSatConvertUToS:
        case Op.OpConvertUToPtr:
        case Op.OpPtrCastToGeneric:
        case Op.OpGenericCastToPtr:
        case Op.OpGenericCastToPtrExplicit:
        case Op.OpBitcast:
        case Op.OpConvertFToBF16INTEL:
        case Op.OpConvertBF16ToFINTEL:
            return OpClass.cConversion;
        case Op.OpVectorExtractDynamic:
        case Op.OpVectorInsertDynamic:
        case Op.OpVectorShuffle:
        case Op.OpCompositeConstruct:
        case Op.OpCompositeExtract:
        case Op.OpCompositeInsert:
        case Op.OpCopyObject:
        case Op.OpTranspose:
        case Op.OpCopyLogical:
        case Op.OpCompositeConstructReplicateEXT:
        case Op.OpCompositeConstructContinuedINTEL:
            return OpClass.cComposite;
        case Op.OpSNegate:
        case Op.OpFNegate:
        case Op.OpIAdd:
        case Op.OpFAdd:
        case Op.OpISub:
        case Op.OpFSub:
        case Op.OpIMul:
        case Op.OpFMul:
        case Op.OpUDiv:
        case Op.OpSDiv:
        case Op.OpFDiv:
        case Op.OpUMod:
        case Op.OpSRem:
        case Op.OpSMod:
        case Op.OpFRem:
        case Op.OpFMod:
        case Op.OpVectorTimesScalar:
        case Op.OpMatrixTimesScalar:
        case Op.OpVectorTimesMatrix:
        case Op.OpMatrixTimesVector:
        case Op.OpMatrixTimesMatrix:
        case Op.OpOuterProduct:
        case Op.OpDot:
        case Op.OpIAddCarry:
        case Op.OpISubBorrow:
        case Op.OpUMulExtended:
        case Op.OpSMulExtended:
        case Op.OpSDot:
        case Op.OpUDot:
        case Op.OpSUDot:
        case Op.OpSDotAccSat:
        case Op.OpUDotAccSat:
        case Op.OpSUDotAccSat:
        case Op.OpCooperativeMatrixMulAddKHR:
            return OpClass.cArithmetic;
        case Op.OpShiftRightLogical:
        case Op.OpShiftRightArithmetic:
        case Op.OpShiftLeftLogical:
        case Op.OpBitwiseOr:
        case Op.OpBitwiseXor:
        case Op.OpBitwiseAnd:
        case Op.OpNot:
        case Op.OpBitFieldInsert:
        case Op.OpBitFieldSExtract:
        case Op.OpBitFieldUExtract:
        case Op.OpBitReverse:
        case Op.OpBitCount:
            return OpClass.cBit;
        case Op.OpAny:
        case Op.OpAll:
        case Op.OpIsNan:
        case Op.OpIsInf:
        case Op.OpIsFinite:
        case Op.OpIsNormal:
        case Op.OpSignBitSet:
        case Op.OpLessOrGreater:
        case Op.OpOrdered:
        case Op.OpUnordered:
        case Op.OpLogicalEqual:
        case Op.OpLogicalNotEqual:
        case Op.OpLogicalOr:
        case Op.OpLogicalAnd:
        case Op.OpLogicalNot:
        case Op.OpSelect:
        case Op.OpIEqual:
        case Op.OpINotEqual:
        case Op.OpUGreaterThan:
        case Op.OpSGreaterThan:
        case Op.OpUGreaterThanEqual:
        case Op.OpSGreaterThanEqual:
        case Op.OpULessThan:
        case Op.OpSLessThan:
        case Op.OpULessThanEqual:
        case Op.OpSLessThanEqual:
        case Op.OpFOrdEqual:
        case Op.OpFUnordEqual:
        case Op.OpFOrdNotEqual:
        case Op.OpFUnordNotEqual:
        case Op.OpFOrdLessThan:
        case Op.OpFUnordLessThan:
        case Op.OpFOrdGreaterThan:
        case Op.OpFUnordGreaterThan:
        case Op.OpFOrdLessThanEqual:
        case Op.OpFUnordLessThanEqual:
        case Op.OpFOrdGreaterThanEqual:
        case Op.OpFUnordGreaterThanEqual:
            return OpClass.cRelationalandLogical;
        case Op.OpDPdx:
        case Op.OpDPdy:
        case Op.OpFwidth:
        case Op.OpDPdxFine:
        case Op.OpDPdyFine:
        case Op.OpFwidthFine:
        case Op.OpDPdxCoarse:
        case Op.OpDPdyCoarse:
        case Op.OpFwidthCoarse:
            return OpClass.cDerivative;
        case Op.OpPhi:
        case Op.OpLoopMerge:
        case Op.OpSelectionMerge:
        case Op.OpLabel:
        case Op.OpBranch:
        case Op.OpBranchConditional:
        case Op.OpSwitch:
        case Op.OpKill:
        case Op.OpReturn:
        case Op.OpReturnValue:
        case Op.OpUnreachable:
        case Op.OpLifetimeStart:
        case Op.OpLifetimeStop:
        case Op.OpTerminateInvocation:
        case Op.OpDemoteToHelperInvocation:
            return OpClass.cControlFlow;
        case Op.OpAtomicLoad:
        case Op.OpAtomicStore:
        case Op.OpAtomicExchange:
        case Op.OpAtomicCompareExchange:
        case Op.OpAtomicCompareExchangeWeak:
        case Op.OpAtomicIIncrement:
        case Op.OpAtomicIDecrement:
        case Op.OpAtomicIAdd:
        case Op.OpAtomicISub:
        case Op.OpAtomicSMin:
        case Op.OpAtomicUMin:
        case Op.OpAtomicSMax:
        case Op.OpAtomicUMax:
        case Op.OpAtomicAnd:
        case Op.OpAtomicOr:
        case Op.OpAtomicXor:
        case Op.OpAtomicFlagTestAndSet:
        case Op.OpAtomicFlagClear:
        case Op.OpAtomicFMinEXT:
        case Op.OpAtomicFMaxEXT:
        case Op.OpAtomicFAddEXT:
            return OpClass.cAtomic;
        case Op.OpEmitVertex:
        case Op.OpEndPrimitive:
        case Op.OpEmitStreamVertex:
        case Op.OpEndStreamPrimitive:
            return OpClass.cPrimitive;
        case Op.OpControlBarrier:
        case Op.OpMemoryBarrier:
        case Op.OpNamedBarrierInitialize:
        case Op.OpMemoryNamedBarrier:
        case Op.OpControlBarrierArriveINTEL:
        case Op.OpControlBarrierWaitINTEL:
            return OpClass.cBarrier;
        case Op.OpGroupAsyncCopy:
        case Op.OpGroupWaitEvents:
        case Op.OpGroupAll:
        case Op.OpGroupAny:
        case Op.OpGroupBroadcast:
        case Op.OpGroupIAdd:
        case Op.OpGroupFAdd:
        case Op.OpGroupFMin:
        case Op.OpGroupUMin:
        case Op.OpGroupSMin:
        case Op.OpGroupFMax:
        case Op.OpGroupUMax:
        case Op.OpGroupSMax:
        case Op.OpSubgroupBallotKHR:
        case Op.OpSubgroupFirstInvocationKHR:
        case Op.OpSubgroupAllKHR:
        case Op.OpSubgroupAnyKHR:
        case Op.OpSubgroupAllEqualKHR:
        case Op.OpGroupNonUniformRotateKHR:
        case Op.OpSubgroupReadInvocationKHR:
        case Op.OpGroupIAddNonUniformAMD:
        case Op.OpGroupFAddNonUniformAMD:
        case Op.OpGroupFMinNonUniformAMD:
        case Op.OpGroupUMinNonUniformAMD:
        case Op.OpGroupSMinNonUniformAMD:
        case Op.OpGroupFMaxNonUniformAMD:
        case Op.OpGroupUMaxNonUniformAMD:
        case Op.OpGroupSMaxNonUniformAMD:
        case Op.OpSubgroupShuffleINTEL:
        case Op.OpSubgroupShuffleDownINTEL:
        case Op.OpSubgroupShuffleUpINTEL:
        case Op.OpSubgroupShuffleXorINTEL:
        case Op.OpSubgroupBlockReadINTEL:
        case Op.OpSubgroupBlockWriteINTEL:
        case Op.OpSubgroupImageBlockReadINTEL:
        case Op.OpSubgroupImageBlockWriteINTEL:
        case Op.OpSubgroupImageMediaBlockReadINTEL:
        case Op.OpSubgroupImageMediaBlockWriteINTEL:
        case Op.OpSubgroupBlockPrefetchINTEL:
        case Op.OpGroupIMulKHR:
        case Op.OpGroupFMulKHR:
        case Op.OpGroupBitwiseAndKHR:
        case Op.OpGroupBitwiseOrKHR:
        case Op.OpGroupBitwiseXorKHR:
        case Op.OpGroupLogicalAndKHR:
        case Op.OpGroupLogicalOrKHR:
        case Op.OpGroupLogicalXorKHR:
            return OpClass.cGroup;
        case Op.OpEnqueueMarker:
        case Op.OpEnqueueKernel:
        case Op.OpGetKernelNDrangeSubGroupCount:
        case Op.OpGetKernelNDrangeMaxSubGroupSize:
        case Op.OpGetKernelWorkGroupSize:
        case Op.OpGetKernelPreferredWorkGroupSizeMultiple:
        case Op.OpRetainEvent:
        case Op.OpReleaseEvent:
        case Op.OpCreateUserEvent:
        case Op.OpIsValidEvent:
        case Op.OpSetUserEventStatus:
        case Op.OpCaptureEventProfilingInfo:
        case Op.OpGetDefaultQueue:
        case Op.OpBuildNDRange:
        case Op.OpGetKernelLocalSizeForSubgroupCount:
        case Op.OpGetKernelMaxNumSubgroups:
            return OpClass.cDeviceSideEnqueue;
        case Op.OpReadPipe:
        case Op.OpWritePipe:
        case Op.OpReservedReadPipe:
        case Op.OpReservedWritePipe:
        case Op.OpReserveReadPipePackets:
        case Op.OpReserveWritePipePackets:
        case Op.OpCommitReadPipe:
        case Op.OpCommitWritePipe:
        case Op.OpIsValidReserveId:
        case Op.OpGetNumPipePackets:
        case Op.OpGetMaxPipePackets:
        case Op.OpGroupReserveReadPipePackets:
        case Op.OpGroupReserveWritePipePackets:
        case Op.OpGroupCommitReadPipe:
        case Op.OpGroupCommitWritePipe:
        case Op.OpConstantPipeStorage:
        case Op.OpCreatePipeFromPipeStorage:
        case Op.OpReadPipeBlockingINTEL:
        case Op.OpWritePipeBlockingINTEL:
            return OpClass.cPipe;
        case Op.OpGroupNonUniformElect:
        case Op.OpGroupNonUniformAll:
        case Op.OpGroupNonUniformAny:
        case Op.OpGroupNonUniformAllEqual:
        case Op.OpGroupNonUniformBroadcast:
        case Op.OpGroupNonUniformBroadcastFirst:
        case Op.OpGroupNonUniformBallot:
        case Op.OpGroupNonUniformInverseBallot:
        case Op.OpGroupNonUniformBallotBitExtract:
        case Op.OpGroupNonUniformBallotBitCount:
        case Op.OpGroupNonUniformBallotFindLSB:
        case Op.OpGroupNonUniformBallotFindMSB:
        case Op.OpGroupNonUniformShuffle:
        case Op.OpGroupNonUniformShuffleXor:
        case Op.OpGroupNonUniformShuffleUp:
        case Op.OpGroupNonUniformShuffleDown:
        case Op.OpGroupNonUniformIAdd:
        case Op.OpGroupNonUniformFAdd:
        case Op.OpGroupNonUniformIMul:
        case Op.OpGroupNonUniformFMul:
        case Op.OpGroupNonUniformSMin:
        case Op.OpGroupNonUniformUMin:
        case Op.OpGroupNonUniformFMin:
        case Op.OpGroupNonUniformSMax:
        case Op.OpGroupNonUniformUMax:
        case Op.OpGroupNonUniformFMax:
        case Op.OpGroupNonUniformBitwiseAnd:
        case Op.OpGroupNonUniformBitwiseOr:
        case Op.OpGroupNonUniformBitwiseXor:
        case Op.OpGroupNonUniformLogicalAnd:
        case Op.OpGroupNonUniformLogicalOr:
        case Op.OpGroupNonUniformLogicalXor:
        case Op.OpGroupNonUniformQuadBroadcast:
        case Op.OpGroupNonUniformQuadSwap:
        case Op.OpGroupNonUniformQuadAllKHR:
        case Op.OpGroupNonUniformQuadAnyKHR:
        case Op.OpGroupNonUniformPartitionNV:
            return OpClass.cNonUniform;
        case Op.OpTraceRayKHR:
        case Op.OpExecuteCallableKHR:
        case Op.OpConvertUToAccelerationStructureKHR:
        case Op.OpIgnoreIntersectionKHR:
        case Op.OpTerminateRayKHR:
        case Op.OpRayQueryInitializeKHR:
        case Op.OpRayQueryTerminateKHR:
        case Op.OpRayQueryGenerateIntersectionKHR:
        case Op.OpRayQueryConfirmIntersectionKHR:
        case Op.OpRayQueryProceedKHR:
        case Op.OpRayQueryGetIntersectionTypeKHR:
        case Op.OpFragmentMaskFetchAMD:
        case Op.OpFragmentFetchAMD:
        case Op.OpReadClockKHR:
        case Op.OpFinalizeNodePayloadsAMDX:
        case Op.OpFinishWritingNodePayloadAMDX:
        case Op.OpInitializeNodePayloadsAMDX:
        case Op.OpHitObjectRecordHitMotionNV:
        case Op.OpHitObjectRecordHitWithIndexMotionNV:
        case Op.OpHitObjectRecordMissMotionNV:
        case Op.OpHitObjectGetWorldToObjectNV:
        case Op.OpHitObjectGetObjectToWorldNV:
        case Op.OpHitObjectGetObjectRayDirectionNV:
        case Op.OpHitObjectGetObjectRayOriginNV:
        case Op.OpHitObjectTraceRayMotionNV:
        case Op.OpHitObjectGetShaderRecordBufferHandleNV:
        case Op.OpHitObjectGetShaderBindingTableRecordIndexNV:
        case Op.OpHitObjectRecordEmptyNV:
        case Op.OpHitObjectTraceRayNV:
        case Op.OpHitObjectRecordHitNV:
        case Op.OpHitObjectRecordHitWithIndexNV:
        case Op.OpHitObjectRecordMissNV:
        case Op.OpHitObjectExecuteShaderNV:
        case Op.OpHitObjectGetCurrentTimeNV:
        case Op.OpHitObjectGetAttributesNV:
        case Op.OpHitObjectGetHitKindNV:
        case Op.OpHitObjectGetPrimitiveIndexNV:
        case Op.OpHitObjectGetGeometryIndexNV:
        case Op.OpHitObjectGetInstanceIdNV:
        case Op.OpHitObjectGetInstanceCustomIndexNV:
        case Op.OpHitObjectGetWorldRayDirectionNV:
        case Op.OpHitObjectGetWorldRayOriginNV:
        case Op.OpHitObjectGetRayTMaxNV:
        case Op.OpHitObjectGetRayTMinNV:
        case Op.OpHitObjectIsEmptyNV:
        case Op.OpHitObjectIsHitNV:
        case Op.OpHitObjectIsMissNV:
        case Op.OpReorderThreadWithHitObjectNV:
        case Op.OpReorderThreadWithHintNV:
        case Op.OpEmitMeshTasksEXT:
        case Op.OpSetMeshOutputsEXT:
        case Op.OpWritePackedPrimitiveIndices4x8NV:
        case Op.OpFetchMicroTriangleVertexPositionNV:
        case Op.OpFetchMicroTriangleVertexBarycentricNV:
        case Op.OpReportIntersectionKHR:
        case Op.OpIgnoreIntersectionNV:
        case Op.OpTerminateRayNV:
        case Op.OpTraceNV:
        case Op.OpTraceMotionNV:
        case Op.OpTraceRayMotionNV:
        case Op.OpRayQueryGetIntersectionTriangleVertexPositionsKHR:
        case Op.OpExecuteCallableNV:
        case Op.OpCooperativeMatrixLoadNV:
        case Op.OpCooperativeMatrixStoreNV:
        case Op.OpCooperativeMatrixMulAddNV:
        case Op.OpCooperativeMatrixLengthNV:
        case Op.OpBeginInvocationInterlockEXT:
        case Op.OpEndInvocationInterlockEXT:
        case Op.OpIsHelperInvocationEXT:
        case Op.OpConvertUToImageNV:
        case Op.OpConvertUToSamplerNV:
        case Op.OpConvertImageToUNV:
        case Op.OpConvertSamplerToUNV:
        case Op.OpConvertUToSampledImageNV:
        case Op.OpConvertSampledImageToUNV:
        case Op.OpSamplerImageAddressingModeNV:
        case Op.OpUCountLeadingZerosINTEL:
        case Op.OpUCountTrailingZerosINTEL:
        case Op.OpAbsISubINTEL:
        case Op.OpAbsUSubINTEL:
        case Op.OpIAddSatINTEL:
        case Op.OpUAddSatINTEL:
        case Op.OpIAverageINTEL:
        case Op.OpUAverageINTEL:
        case Op.OpIAverageRoundedINTEL:
        case Op.OpUAverageRoundedINTEL:
        case Op.OpISubSatINTEL:
        case Op.OpUSubSatINTEL:
        case Op.OpIMul32x16INTEL:
        case Op.OpUMul32x16INTEL:
        case Op.OpLoopControlINTEL:
        case Op.OpFPGARegINTEL:
        case Op.OpRayQueryGetRayTMinKHR:
        case Op.OpRayQueryGetRayFlagsKHR:
        case Op.OpRayQueryGetIntersectionTKHR:
        case Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR:
        case Op.OpRayQueryGetIntersectionInstanceIdKHR:
        case Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
        case Op.OpRayQueryGetIntersectionGeometryIndexKHR:
        case Op.OpRayQueryGetIntersectionPrimitiveIndexKHR:
        case Op.OpRayQueryGetIntersectionBarycentricsKHR:
        case Op.OpRayQueryGetIntersectionFrontFaceKHR:
        case Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
        case Op.OpRayQueryGetIntersectionObjectRayDirectionKHR:
        case Op.OpRayQueryGetIntersectionObjectRayOriginKHR:
        case Op.OpRayQueryGetWorldRayDirectionKHR:
        case Op.OpRayQueryGetWorldRayOriginKHR:
        case Op.OpRayQueryGetIntersectionObjectToWorldKHR:
        case Op.OpRayQueryGetIntersectionWorldToObjectKHR:
            return OpClass.cReserved;
    }
}

/**
    Gets whether [Op] returns a result.
*/
bool hasResult(Op code) @nogc {
    switch (code) {
        default:
            return false;
        
        case Op.OpUndef:
        case Op.OpString:
        case Op.OpExtInstImport:
        case Op.OpExtInst:
        case Op.OpTypeVoid:
        case Op.OpTypeBool:
        case Op.OpTypeInt:
        case Op.OpTypeFloat:
        case Op.OpTypeVector:
        case Op.OpTypeMatrix:
        case Op.OpTypeImage:
        case Op.OpTypeSampler:
        case Op.OpTypeSampledImage:
        case Op.OpTypeArray:
        case Op.OpTypeRuntimeArray:
        case Op.OpTypeStruct:
        case Op.OpTypeOpaque:
        case Op.OpTypePointer:
        case Op.OpTypeFunction:
        case Op.OpTypeEvent:
        case Op.OpTypeDeviceEvent:
        case Op.OpTypeReserveId:
        case Op.OpTypeQueue:
        case Op.OpTypePipe:
        case Op.OpConstantTrue:
        case Op.OpConstantFalse:
        case Op.OpConstant:
        case Op.OpConstantComposite:
        case Op.OpConstantSampler:
        case Op.OpConstantNull:
        case Op.OpSpecConstantTrue:
        case Op.OpSpecConstantFalse:
        case Op.OpSpecConstant:
        case Op.OpSpecConstantComposite:
        case Op.OpSpecConstantOp:
        case Op.OpFunction:
        case Op.OpFunctionParameter:
        case Op.OpFunctionCall:
        case Op.OpVariable:
        case Op.OpImageTexelPointer:
        case Op.OpLoad:
        case Op.OpAccessChain:
        case Op.OpInBoundsAccessChain:
        case Op.OpPtrAccessChain:
        case Op.OpArrayLength:
        case Op.OpGenericPtrMemSemantics:
        case Op.OpInBoundsPtrAccessChain:
        case Op.OpDecorationGroup:
        case Op.OpVectorExtractDynamic:
        case Op.OpVectorInsertDynamic:
        case Op.OpVectorShuffle:
        case Op.OpCompositeConstruct:
        case Op.OpCompositeExtract:
        case Op.OpCompositeInsert:
        case Op.OpCopyObject:
        case Op.OpTranspose:
        case Op.OpSampledImage:
        case Op.OpImageSampleImplicitLod:
        case Op.OpImageSampleExplicitLod:
        case Op.OpImageSampleDrefImplicitLod:
        case Op.OpImageSampleDrefExplicitLod:
        case Op.OpImageSampleProjImplicitLod:
        case Op.OpImageSampleProjExplicitLod:
        case Op.OpImageSampleProjDrefImplicitLod:
        case Op.OpImageSampleProjDrefExplicitLod:
        case Op.OpImageFetch:
        case Op.OpImageGather:
        case Op.OpImageDrefGather:
        case Op.OpImageRead:
        case Op.OpImage:
        case Op.OpImageQueryFormat:
        case Op.OpImageQueryOrder:
        case Op.OpImageQuerySizeLod:
        case Op.OpImageQuerySize:
        case Op.OpImageQueryLod:
        case Op.OpImageQueryLevels:
        case Op.OpImageQuerySamples:
        case Op.OpConvertFToU:
        case Op.OpConvertFToS:
        case Op.OpConvertSToF:
        case Op.OpConvertUToF:
        case Op.OpUConvert:
        case Op.OpSConvert:
        case Op.OpFConvert:
        case Op.OpQuantizeToF16:
        case Op.OpConvertPtrToU:
        case Op.OpSatConvertSToU:
        case Op.OpSatConvertUToS:
        case Op.OpConvertUToPtr:
        case Op.OpPtrCastToGeneric:
        case Op.OpGenericCastToPtr:
        case Op.OpGenericCastToPtrExplicit:
        case Op.OpBitcast:
        case Op.OpSNegate:
        case Op.OpFNegate:
        case Op.OpIAdd:
        case Op.OpFAdd:
        case Op.OpISub:
        case Op.OpFSub:
        case Op.OpIMul:
        case Op.OpFMul:
        case Op.OpUDiv:
        case Op.OpSDiv:
        case Op.OpFDiv:
        case Op.OpUMod:
        case Op.OpSRem:
        case Op.OpSMod:
        case Op.OpFRem:
        case Op.OpFMod:
        case Op.OpVectorTimesScalar:
        case Op.OpMatrixTimesScalar:
        case Op.OpVectorTimesMatrix:
        case Op.OpMatrixTimesVector:
        case Op.OpMatrixTimesMatrix:
        case Op.OpOuterProduct:
        case Op.OpDot:
        case Op.OpIAddCarry:
        case Op.OpISubBorrow:
        case Op.OpUMulExtended:
        case Op.OpSMulExtended:
        case Op.OpAny:
        case Op.OpAll:
        case Op.OpIsNan:
        case Op.OpIsInf:
        case Op.OpIsFinite:
        case Op.OpIsNormal:
        case Op.OpSignBitSet:
        case Op.OpLessOrGreater:
        case Op.OpOrdered:
        case Op.OpUnordered:
        case Op.OpLogicalEqual:
        case Op.OpLogicalNotEqual:
        case Op.OpLogicalOr:
        case Op.OpLogicalAnd:
        case Op.OpLogicalNot:
        case Op.OpSelect:
        case Op.OpIEqual:
        case Op.OpINotEqual:
        case Op.OpUGreaterThan:
        case Op.OpSGreaterThan:
        case Op.OpUGreaterThanEqual:
        case Op.OpSGreaterThanEqual:
        case Op.OpULessThan:
        case Op.OpSLessThan:
        case Op.OpULessThanEqual:
        case Op.OpSLessThanEqual:
        case Op.OpFOrdEqual:
        case Op.OpFUnordEqual:
        case Op.OpFOrdNotEqual:
        case Op.OpFUnordNotEqual:
        case Op.OpFOrdLessThan:
        case Op.OpFUnordLessThan:
        case Op.OpFOrdGreaterThan:
        case Op.OpFUnordGreaterThan:
        case Op.OpFOrdLessThanEqual:
        case Op.OpFUnordLessThanEqual:
        case Op.OpFOrdGreaterThanEqual:
        case Op.OpFUnordGreaterThanEqual:
        case Op.OpShiftRightLogical:
        case Op.OpShiftRightArithmetic:
        case Op.OpShiftLeftLogical:
        case Op.OpBitwiseOr:
        case Op.OpBitwiseXor:
        case Op.OpBitwiseAnd:
        case Op.OpNot:
        case Op.OpBitFieldInsert:
        case Op.OpBitFieldSExtract:
        case Op.OpBitFieldUExtract:
        case Op.OpBitReverse:
        case Op.OpBitCount:
        case Op.OpDPdx:
        case Op.OpDPdy:
        case Op.OpFwidth:
        case Op.OpDPdxFine:
        case Op.OpDPdyFine:
        case Op.OpFwidthFine:
        case Op.OpDPdxCoarse:
        case Op.OpDPdyCoarse:
        case Op.OpFwidthCoarse:
        case Op.OpAtomicLoad:
        case Op.OpAtomicExchange:
        case Op.OpAtomicCompareExchange:
        case Op.OpAtomicCompareExchangeWeak:
        case Op.OpAtomicIIncrement:
        case Op.OpAtomicIDecrement:
        case Op.OpAtomicIAdd:
        case Op.OpAtomicISub:
        case Op.OpAtomicSMin:
        case Op.OpAtomicUMin:
        case Op.OpAtomicSMax:
        case Op.OpAtomicUMax:
        case Op.OpAtomicAnd:
        case Op.OpAtomicOr:
        case Op.OpAtomicXor:
        case Op.OpPhi:
        case Op.OpLabel:
        case Op.OpGroupAsyncCopy:
        case Op.OpGroupAll:
        case Op.OpGroupAny:
        case Op.OpGroupBroadcast:
        case Op.OpGroupIAdd:
        case Op.OpGroupFAdd:
        case Op.OpGroupFMin:
        case Op.OpGroupUMin:
        case Op.OpGroupSMin:
        case Op.OpGroupFMax:
        case Op.OpGroupUMax:
        case Op.OpGroupSMax:
        case Op.OpReadPipe:
        case Op.OpWritePipe:
        case Op.OpReservedReadPipe:
        case Op.OpReservedWritePipe:
        case Op.OpReserveReadPipePackets:
        case Op.OpReserveWritePipePackets:
        case Op.OpIsValidReserveId:
        case Op.OpGetNumPipePackets:
        case Op.OpGetMaxPipePackets:
        case Op.OpGroupReserveReadPipePackets:
        case Op.OpGroupReserveWritePipePackets:
        case Op.OpEnqueueMarker:
        case Op.OpEnqueueKernel:
        case Op.OpGetKernelNDrangeSubGroupCount:
        case Op.OpGetKernelNDrangeMaxSubGroupSize:
        case Op.OpGetKernelWorkGroupSize:
        case Op.OpGetKernelPreferredWorkGroupSizeMultiple:
        case Op.OpCreateUserEvent:
        case Op.OpIsValidEvent:
        case Op.OpGetDefaultQueue:
        case Op.OpBuildNDRange:
        case Op.OpImageSparseSampleImplicitLod:
        case Op.OpImageSparseSampleExplicitLod:
        case Op.OpImageSparseSampleDrefImplicitLod:
        case Op.OpImageSparseSampleDrefExplicitLod:
        case Op.OpImageSparseSampleProjImplicitLod:
        case Op.OpImageSparseSampleProjExplicitLod:
        case Op.OpImageSparseSampleProjDrefImplicitLod:
        case Op.OpImageSparseSampleProjDrefExplicitLod:
        case Op.OpImageSparseFetch:
        case Op.OpImageSparseGather:
        case Op.OpImageSparseDrefGather:
        case Op.OpImageSparseTexelsResident:
        case Op.OpAtomicFlagTestAndSet:
        case Op.OpImageSparseRead:
        case Op.OpSizeOf:
        case Op.OpTypePipeStorage:
        case Op.OpConstantPipeStorage:
        case Op.OpCreatePipeFromPipeStorage:
        case Op.OpGetKernelLocalSizeForSubgroupCount:
        case Op.OpGetKernelMaxNumSubgroups:
        case Op.OpTypeNamedBarrier:
        case Op.OpNamedBarrierInitialize:
        case Op.OpGroupNonUniformElect:
        case Op.OpGroupNonUniformAll:
        case Op.OpGroupNonUniformAny:
        case Op.OpGroupNonUniformAllEqual:
        case Op.OpGroupNonUniformBroadcast:
        case Op.OpGroupNonUniformBroadcastFirst:
        case Op.OpGroupNonUniformBallot:
        case Op.OpGroupNonUniformInverseBallot:
        case Op.OpGroupNonUniformBallotBitExtract:
        case Op.OpGroupNonUniformBallotBitCount:
        case Op.OpGroupNonUniformBallotFindLSB:
        case Op.OpGroupNonUniformBallotFindMSB:
        case Op.OpGroupNonUniformShuffle:
        case Op.OpGroupNonUniformShuffleXor:
        case Op.OpGroupNonUniformShuffleUp:
        case Op.OpGroupNonUniformShuffleDown:
        case Op.OpGroupNonUniformIAdd:
        case Op.OpGroupNonUniformFAdd:
        case Op.OpGroupNonUniformIMul:
        case Op.OpGroupNonUniformFMul:
        case Op.OpGroupNonUniformSMin:
        case Op.OpGroupNonUniformUMin:
        case Op.OpGroupNonUniformFMin:
        case Op.OpGroupNonUniformSMax:
        case Op.OpGroupNonUniformUMax:
        case Op.OpGroupNonUniformFMax:
        case Op.OpGroupNonUniformBitwiseAnd:
        case Op.OpGroupNonUniformBitwiseOr:
        case Op.OpGroupNonUniformBitwiseXor:
        case Op.OpGroupNonUniformLogicalAnd:
        case Op.OpGroupNonUniformLogicalOr:
        case Op.OpGroupNonUniformLogicalXor:
        case Op.OpGroupNonUniformQuadBroadcast:
        case Op.OpGroupNonUniformQuadSwap:
        case Op.OpCopyLogical:
        case Op.OpPtrEqual:
        case Op.OpPtrNotEqual:
        case Op.OpPtrDiff:
        case Op.OpColorAttachmentReadEXT:
        case Op.OpDepthAttachmentReadEXT:
        case Op.OpStencilAttachmentReadEXT:
        case Op.OpTypeUntypedPointerKHR:
        case Op.OpUntypedVariableKHR:
        case Op.OpUntypedAccessChainKHR:
        case Op.OpUntypedInBoundsAccessChainKHR:
        case Op.OpSubgroupBallotKHR:
        case Op.OpSubgroupFirstInvocationKHR:
        case Op.OpUntypedPtrAccessChainKHR:
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
        case Op.OpUntypedArrayLengthKHR:
        case Op.OpSubgroupAllKHR:
        case Op.OpSubgroupAnyKHR:
        case Op.OpSubgroupAllEqualKHR:
        case Op.OpGroupNonUniformRotateKHR:
        case Op.OpSubgroupReadInvocationKHR:
        case Op.OpExtInstWithForwardRefsKHR:
        case Op.OpConvertUToAccelerationStructureKHR:
        case Op.OpSDot:
        case Op.OpUDot:
        case Op.OpSUDot:
        case Op.OpSDotAccSat:
        case Op.OpUDotAccSat:
        case Op.OpSUDotAccSat:
        case Op.OpTypeCooperativeMatrixKHR:
        case Op.OpCooperativeMatrixLoadKHR:
        case Op.OpCooperativeMatrixMulAddKHR:
        case Op.OpCooperativeMatrixLengthKHR:
        case Op.OpConstantCompositeReplicateEXT:
        case Op.OpSpecConstantCompositeReplicateEXT:
        case Op.OpCompositeConstructReplicateEXT:
        case Op.OpTypeRayQueryKHR:
        case Op.OpRayQueryProceedKHR:
        case Op.OpRayQueryGetIntersectionTypeKHR:
        case Op.OpImageSampleWeightedQCOM:
        case Op.OpImageBoxFilterQCOM:
        case Op.OpImageBlockMatchSSDQCOM:
        case Op.OpImageBlockMatchSADQCOM:
        case Op.OpImageBlockMatchWindowSSDQCOM:
        case Op.OpImageBlockMatchWindowSADQCOM:
        case Op.OpImageBlockMatchGatherSSDQCOM:
        case Op.OpImageBlockMatchGatherSADQCOM:
        case Op.OpGroupIAddNonUniformAMD:
        case Op.OpGroupFAddNonUniformAMD:
        case Op.OpGroupFMinNonUniformAMD:
        case Op.OpGroupUMinNonUniformAMD:
        case Op.OpGroupSMinNonUniformAMD:
        case Op.OpGroupFMaxNonUniformAMD:
        case Op.OpGroupUMaxNonUniformAMD:
        case Op.OpGroupSMaxNonUniformAMD:
        case Op.OpFragmentMaskFetchAMD:
        case Op.OpFragmentFetchAMD:
        case Op.OpReadClockKHR:
        case Op.OpFinishWritingNodePayloadAMDX:
        case Op.OpGroupNonUniformQuadAllKHR:
        case Op.OpGroupNonUniformQuadAnyKHR:
        case Op.OpHitObjectGetWorldToObjectNV:
        case Op.OpHitObjectGetObjectToWorldNV:
        case Op.OpHitObjectGetObjectRayDirectionNV:
        case Op.OpHitObjectGetObjectRayOriginNV:
        case Op.OpHitObjectGetShaderRecordBufferHandleNV:
        case Op.OpHitObjectGetShaderBindingTableRecordIndexNV:
        case Op.OpHitObjectGetCurrentTimeNV:
        case Op.OpHitObjectGetHitKindNV:
        case Op.OpHitObjectGetPrimitiveIndexNV:
        case Op.OpHitObjectGetGeometryIndexNV:
        case Op.OpHitObjectGetInstanceIdNV:
        case Op.OpHitObjectGetInstanceCustomIndexNV:
        case Op.OpHitObjectGetWorldRayDirectionNV:
        case Op.OpHitObjectGetWorldRayOriginNV:
        case Op.OpHitObjectGetRayTMaxNV:
        case Op.OpHitObjectGetRayTMinNV:
        case Op.OpHitObjectIsEmptyNV:
        case Op.OpHitObjectIsHitNV:
        case Op.OpHitObjectIsMissNV:
        case Op.OpTypeHitObjectNV:
        case Op.OpImageSampleFootprintNV:
        case Op.OpGroupNonUniformPartitionNV:
        case Op.OpFetchMicroTriangleVertexPositionNV:
        case Op.OpFetchMicroTriangleVertexBarycentricNV:
        case Op.OpReportIntersectionKHR:
        case Op.OpRayQueryGetIntersectionTriangleVertexPositionsKHR:
        case Op.OpTypeAccelerationStructureKHR:
        case Op.OpTypeCooperativeMatrixNV:
        case Op.OpCooperativeMatrixLoadNV:
        case Op.OpCooperativeMatrixMulAddNV:
        case Op.OpCooperativeMatrixLengthNV:
        case Op.OpIsHelperInvocationEXT:
        case Op.OpConvertUToImageNV:
        case Op.OpConvertUToSamplerNV:
        case Op.OpConvertImageToUNV:
        case Op.OpConvertSamplerToUNV:
        case Op.OpConvertUToSampledImageNV:
        case Op.OpConvertSampledImageToUNV:
        case Op.OpRawAccessChainNV:
        case Op.OpSubgroupShuffleINTEL:
        case Op.OpSubgroupShuffleDownINTEL:
        case Op.OpSubgroupShuffleUpINTEL:
        case Op.OpSubgroupShuffleXorINTEL:
        case Op.OpSubgroupBlockReadINTEL:
        case Op.OpSubgroupImageBlockReadINTEL:
        case Op.OpSubgroupImageMediaBlockReadINTEL:
        case Op.OpUCountLeadingZerosINTEL:
        case Op.OpUCountTrailingZerosINTEL:
        case Op.OpAbsISubINTEL:
        case Op.OpAbsUSubINTEL:
        case Op.OpIAddSatINTEL:
        case Op.OpUAddSatINTEL:
        case Op.OpIAverageINTEL:
        case Op.OpUAverageINTEL:
        case Op.OpIAverageRoundedINTEL:
        case Op.OpUAverageRoundedINTEL:
        case Op.OpISubSatINTEL:
        case Op.OpUSubSatINTEL:
        case Op.OpIMul32x16INTEL:
        case Op.OpUMul32x16INTEL:
        case Op.OpConstantFunctionPointerINTEL:
        case Op.OpFunctionPointerCallINTEL:
        case Op.OpAsmTargetINTEL:
        case Op.OpAsmINTEL:
        case Op.OpAsmCallINTEL:
        case Op.OpAtomicFMinEXT:
        case Op.OpAtomicFMaxEXT:
        case Op.OpExpectKHR:
        case Op.OpVmeImageINTEL:
        case Op.OpTypeVmeImageINTEL:
        case Op.OpTypeAvcImePayloadINTEL:
        case Op.OpTypeAvcRefPayloadINTEL:
        case Op.OpTypeAvcSicPayloadINTEL:
        case Op.OpTypeAvcMcePayloadINTEL:
        case Op.OpTypeAvcMceResultINTEL:
        case Op.OpTypeAvcImeResultINTEL:
        case Op.OpTypeAvcImeResultSingleReferenceStreamoutINTEL:
        case Op.OpTypeAvcImeResultDualReferenceStreamoutINTEL:
        case Op.OpTypeAvcImeSingleReferenceStreaminINTEL:
        case Op.OpTypeAvcImeDualReferenceStreaminINTEL:
        case Op.OpTypeAvcRefResultINTEL:
        case Op.OpTypeAvcSicResultINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
        case Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
        case Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
        case Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
        case Op.OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
        case Op.OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
        case Op.OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
        case Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
        case Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL:
        case Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
        case Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
        case Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
        case Op.OpSubgroupAvcMceConvertToImePayloadINTEL:
        case Op.OpSubgroupAvcMceConvertToImeResultINTEL:
        case Op.OpSubgroupAvcMceConvertToRefPayloadINTEL:
        case Op.OpSubgroupAvcMceConvertToRefResultINTEL:
        case Op.OpSubgroupAvcMceConvertToSicPayloadINTEL:
        case Op.OpSubgroupAvcMceConvertToSicResultINTEL:
        case Op.OpSubgroupAvcMceGetMotionVectorsINTEL:
        case Op.OpSubgroupAvcMceGetInterDistortionsINTEL:
        case Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL:
        case Op.OpSubgroupAvcMceGetInterMajorShapeINTEL:
        case Op.OpSubgroupAvcMceGetInterMinorShapeINTEL:
        case Op.OpSubgroupAvcMceGetInterDirectionsINTEL:
        case Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL:
        case Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL:
        case Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
        case Op.OpSubgroupAvcImeInitializeINTEL:
        case Op.OpSubgroupAvcImeSetSingleReferenceINTEL:
        case Op.OpSubgroupAvcImeSetDualReferenceINTEL:
        case Op.OpSubgroupAvcImeRefWindowSizeINTEL:
        case Op.OpSubgroupAvcImeAdjustRefOffsetINTEL:
        case Op.OpSubgroupAvcImeConvertToMcePayloadINTEL:
        case Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
        case Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
        case Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
        case Op.OpSubgroupAvcImeSetWeightedSadINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
        case Op.OpSubgroupAvcImeConvertToMceResultINTEL:
        case Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
        case Op.OpSubgroupAvcImeGetBorderReachedINTEL:
        case Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
        case Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
        case Op.OpSubgroupAvcFmeInitializeINTEL:
        case Op.OpSubgroupAvcBmeInitializeINTEL:
        case Op.OpSubgroupAvcRefConvertToMcePayloadINTEL:
        case Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
        case Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
        case Op.OpSubgroupAvcRefConvertToMceResultINTEL:
        case Op.OpSubgroupAvcSicInitializeINTEL:
        case Op.OpSubgroupAvcSicConfigureSkcINTEL:
        case Op.OpSubgroupAvcSicConfigureIpeLumaINTEL:
        case Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
        case Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL:
        case Op.OpSubgroupAvcSicConvertToMcePayloadINTEL:
        case Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
        case Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
        case Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
        case Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL:
        case Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
        case Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
        case Op.OpSubgroupAvcSicEvaluateIpeINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
        case Op.OpSubgroupAvcSicConvertToMceResultINTEL:
        case Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL:
        case Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
        case Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
        case Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
        case Op.OpSubgroupAvcSicGetIpeChromaModeINTEL:
        case Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
        case Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
        case Op.OpSubgroupAvcSicGetInterRawSadsINTEL:
        case Op.OpVariableLengthArrayINTEL:
        case Op.OpSaveMemoryINTEL:
        case Op.OpArbitraryFloatSinCosPiINTEL:
        case Op.OpArbitraryFloatCastINTEL:
        case Op.OpArbitraryFloatCastFromIntINTEL:
        case Op.OpArbitraryFloatCastToIntINTEL:
        case Op.OpArbitraryFloatAddINTEL:
        case Op.OpArbitraryFloatSubINTEL:
        case Op.OpArbitraryFloatMulINTEL:
        case Op.OpArbitraryFloatDivINTEL:
        case Op.OpArbitraryFloatGTINTEL:
        case Op.OpArbitraryFloatGEINTEL:
        case Op.OpArbitraryFloatLTINTEL:
        case Op.OpArbitraryFloatLEINTEL:
        case Op.OpArbitraryFloatEQINTEL:
        case Op.OpArbitraryFloatRecipINTEL:
        case Op.OpArbitraryFloatRSqrtINTEL:
        case Op.OpArbitraryFloatCbrtINTEL:
        case Op.OpArbitraryFloatHypotINTEL:
        case Op.OpArbitraryFloatSqrtINTEL:
        case Op.OpArbitraryFloatLogINTEL:
        case Op.OpArbitraryFloatLog2INTEL:
        case Op.OpArbitraryFloatLog10INTEL:
        case Op.OpArbitraryFloatLog1pINTEL:
        case Op.OpArbitraryFloatExpINTEL:
        case Op.OpArbitraryFloatExp2INTEL:
        case Op.OpArbitraryFloatExp10INTEL:
        case Op.OpArbitraryFloatExpm1INTEL:
        case Op.OpArbitraryFloatSinINTEL:
        case Op.OpArbitraryFloatCosINTEL:
        case Op.OpArbitraryFloatSinCosINTEL:
        case Op.OpArbitraryFloatSinPiINTEL:
        case Op.OpArbitraryFloatCosPiINTEL:
        case Op.OpArbitraryFloatASinINTEL:
        case Op.OpArbitraryFloatASinPiINTEL:
        case Op.OpArbitraryFloatACosINTEL:
        case Op.OpArbitraryFloatACosPiINTEL:
        case Op.OpArbitraryFloatATanINTEL:
        case Op.OpArbitraryFloatATanPiINTEL:
        case Op.OpArbitraryFloatATan2INTEL:
        case Op.OpArbitraryFloatPowINTEL:
        case Op.OpArbitraryFloatPowRINTEL:
        case Op.OpArbitraryFloatPowNINTEL:
        case Op.OpAliasDomainDeclINTEL:
        case Op.OpAliasScopeDeclINTEL:
        case Op.OpAliasScopeListDeclINTEL:
        case Op.OpFixedSqrtINTEL:
        case Op.OpFixedRecipINTEL:
        case Op.OpFixedRsqrtINTEL:
        case Op.OpFixedSinINTEL:
        case Op.OpFixedCosINTEL:
        case Op.OpFixedSinCosINTEL:
        case Op.OpFixedSinPiINTEL:
        case Op.OpFixedCosPiINTEL:
        case Op.OpFixedSinCosPiINTEL:
        case Op.OpFixedLogINTEL:
        case Op.OpFixedExpINTEL:
        case Op.OpPtrCastToCrossWorkgroupINTEL:
        case Op.OpCrossWorkgroupCastToPtrINTEL:
        case Op.OpReadPipeBlockingINTEL:
        case Op.OpWritePipeBlockingINTEL:
        case Op.OpFPGARegINTEL:
        case Op.OpRayQueryGetRayTMinKHR:
        case Op.OpRayQueryGetRayFlagsKHR:
        case Op.OpRayQueryGetIntersectionTKHR:
        case Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR:
        case Op.OpRayQueryGetIntersectionInstanceIdKHR:
        case Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
        case Op.OpRayQueryGetIntersectionGeometryIndexKHR:
        case Op.OpRayQueryGetIntersectionPrimitiveIndexKHR:
        case Op.OpRayQueryGetIntersectionBarycentricsKHR:
        case Op.OpRayQueryGetIntersectionFrontFaceKHR:
        case Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
        case Op.OpRayQueryGetIntersectionObjectRayDirectionKHR:
        case Op.OpRayQueryGetIntersectionObjectRayOriginKHR:
        case Op.OpRayQueryGetWorldRayDirectionKHR:
        case Op.OpRayQueryGetWorldRayOriginKHR:
        case Op.OpRayQueryGetIntersectionObjectToWorldKHR:
        case Op.OpRayQueryGetIntersectionWorldToObjectKHR:
        case Op.OpAtomicFAddEXT:
        case Op.OpTypeBufferSurfaceINTEL:
        case Op.OpCompositeConstructContinuedINTEL:
        case Op.OpConvertFToBF16INTEL:
        case Op.OpConvertBF16ToFINTEL:
        case Op.OpGroupIMulKHR:
        case Op.OpGroupFMulKHR:
        case Op.OpGroupBitwiseAndKHR:
        case Op.OpGroupBitwiseOrKHR:
        case Op.OpGroupBitwiseXorKHR:
        case Op.OpGroupLogicalAndKHR:
        case Op.OpGroupLogicalOrKHR:
        case Op.OpGroupLogicalXorKHR:
        case Op.OpMaskedGatherINTEL:
            return true;
    }
}

/**
    Gets whether [Op] returns a result type.
*/
bool hasResultType(Op code) @nogc {
    switch (code) {
        default:
            return false;
        
        case Op.OpUndef:
        case Op.OpExtInst:
        case Op.OpConstantTrue:
        case Op.OpConstantFalse:
        case Op.OpConstant:
        case Op.OpConstantComposite:
        case Op.OpConstantSampler:
        case Op.OpConstantNull:
        case Op.OpSpecConstantTrue:
        case Op.OpSpecConstantFalse:
        case Op.OpSpecConstant:
        case Op.OpSpecConstantComposite:
        case Op.OpSpecConstantOp:
        case Op.OpFunction:
        case Op.OpFunctionParameter:
        case Op.OpFunctionCall:
        case Op.OpVariable:
        case Op.OpImageTexelPointer:
        case Op.OpLoad:
        case Op.OpAccessChain:
        case Op.OpInBoundsAccessChain:
        case Op.OpPtrAccessChain:
        case Op.OpArrayLength:
        case Op.OpGenericPtrMemSemantics:
        case Op.OpInBoundsPtrAccessChain:
        case Op.OpVectorExtractDynamic:
        case Op.OpVectorInsertDynamic:
        case Op.OpVectorShuffle:
        case Op.OpCompositeConstruct:
        case Op.OpCompositeExtract:
        case Op.OpCompositeInsert:
        case Op.OpCopyObject:
        case Op.OpTranspose:
        case Op.OpSampledImage:
        case Op.OpImageSampleImplicitLod:
        case Op.OpImageSampleExplicitLod:
        case Op.OpImageSampleDrefImplicitLod:
        case Op.OpImageSampleDrefExplicitLod:
        case Op.OpImageSampleProjImplicitLod:
        case Op.OpImageSampleProjExplicitLod:
        case Op.OpImageSampleProjDrefImplicitLod:
        case Op.OpImageSampleProjDrefExplicitLod:
        case Op.OpImageFetch:
        case Op.OpImageGather:
        case Op.OpImageDrefGather:
        case Op.OpImageRead:
        case Op.OpImage:
        case Op.OpImageQueryFormat:
        case Op.OpImageQueryOrder:
        case Op.OpImageQuerySizeLod:
        case Op.OpImageQuerySize:
        case Op.OpImageQueryLod:
        case Op.OpImageQueryLevels:
        case Op.OpImageQuerySamples:
        case Op.OpConvertFToU:
        case Op.OpConvertFToS:
        case Op.OpConvertSToF:
        case Op.OpConvertUToF:
        case Op.OpUConvert:
        case Op.OpSConvert:
        case Op.OpFConvert:
        case Op.OpQuantizeToF16:
        case Op.OpConvertPtrToU:
        case Op.OpSatConvertSToU:
        case Op.OpSatConvertUToS:
        case Op.OpConvertUToPtr:
        case Op.OpPtrCastToGeneric:
        case Op.OpGenericCastToPtr:
        case Op.OpGenericCastToPtrExplicit:
        case Op.OpBitcast:
        case Op.OpSNegate:
        case Op.OpFNegate:
        case Op.OpIAdd:
        case Op.OpFAdd:
        case Op.OpISub:
        case Op.OpFSub:
        case Op.OpIMul:
        case Op.OpFMul:
        case Op.OpUDiv:
        case Op.OpSDiv:
        case Op.OpFDiv:
        case Op.OpUMod:
        case Op.OpSRem:
        case Op.OpSMod:
        case Op.OpFRem:
        case Op.OpFMod:
        case Op.OpVectorTimesScalar:
        case Op.OpMatrixTimesScalar:
        case Op.OpVectorTimesMatrix:
        case Op.OpMatrixTimesVector:
        case Op.OpMatrixTimesMatrix:
        case Op.OpOuterProduct:
        case Op.OpDot:
        case Op.OpIAddCarry:
        case Op.OpISubBorrow:
        case Op.OpUMulExtended:
        case Op.OpSMulExtended:
        case Op.OpAny:
        case Op.OpAll:
        case Op.OpIsNan:
        case Op.OpIsInf:
        case Op.OpIsFinite:
        case Op.OpIsNormal:
        case Op.OpSignBitSet:
        case Op.OpLessOrGreater:
        case Op.OpOrdered:
        case Op.OpUnordered:
        case Op.OpLogicalEqual:
        case Op.OpLogicalNotEqual:
        case Op.OpLogicalOr:
        case Op.OpLogicalAnd:
        case Op.OpLogicalNot:
        case Op.OpSelect:
        case Op.OpIEqual:
        case Op.OpINotEqual:
        case Op.OpUGreaterThan:
        case Op.OpSGreaterThan:
        case Op.OpUGreaterThanEqual:
        case Op.OpSGreaterThanEqual:
        case Op.OpULessThan:
        case Op.OpSLessThan:
        case Op.OpULessThanEqual:
        case Op.OpSLessThanEqual:
        case Op.OpFOrdEqual:
        case Op.OpFUnordEqual:
        case Op.OpFOrdNotEqual:
        case Op.OpFUnordNotEqual:
        case Op.OpFOrdLessThan:
        case Op.OpFUnordLessThan:
        case Op.OpFOrdGreaterThan:
        case Op.OpFUnordGreaterThan:
        case Op.OpFOrdLessThanEqual:
        case Op.OpFUnordLessThanEqual:
        case Op.OpFOrdGreaterThanEqual:
        case Op.OpFUnordGreaterThanEqual:
        case Op.OpShiftRightLogical:
        case Op.OpShiftRightArithmetic:
        case Op.OpShiftLeftLogical:
        case Op.OpBitwiseOr:
        case Op.OpBitwiseXor:
        case Op.OpBitwiseAnd:
        case Op.OpNot:
        case Op.OpBitFieldInsert:
        case Op.OpBitFieldSExtract:
        case Op.OpBitFieldUExtract:
        case Op.OpBitReverse:
        case Op.OpBitCount:
        case Op.OpDPdx:
        case Op.OpDPdy:
        case Op.OpFwidth:
        case Op.OpDPdxFine:
        case Op.OpDPdyFine:
        case Op.OpFwidthFine:
        case Op.OpDPdxCoarse:
        case Op.OpDPdyCoarse:
        case Op.OpFwidthCoarse:
        case Op.OpAtomicLoad:
        case Op.OpAtomicExchange:
        case Op.OpAtomicCompareExchange:
        case Op.OpAtomicCompareExchangeWeak:
        case Op.OpAtomicIIncrement:
        case Op.OpAtomicIDecrement:
        case Op.OpAtomicIAdd:
        case Op.OpAtomicISub:
        case Op.OpAtomicSMin:
        case Op.OpAtomicUMin:
        case Op.OpAtomicSMax:
        case Op.OpAtomicUMax:
        case Op.OpAtomicAnd:
        case Op.OpAtomicOr:
        case Op.OpAtomicXor:
        case Op.OpPhi:
        case Op.OpGroupAsyncCopy:
        case Op.OpGroupAll:
        case Op.OpGroupAny:
        case Op.OpGroupBroadcast:
        case Op.OpGroupIAdd:
        case Op.OpGroupFAdd:
        case Op.OpGroupFMin:
        case Op.OpGroupUMin:
        case Op.OpGroupSMin:
        case Op.OpGroupFMax:
        case Op.OpGroupUMax:
        case Op.OpGroupSMax:
        case Op.OpReadPipe:
        case Op.OpWritePipe:
        case Op.OpReservedReadPipe:
        case Op.OpReservedWritePipe:
        case Op.OpReserveReadPipePackets:
        case Op.OpReserveWritePipePackets:
        case Op.OpIsValidReserveId:
        case Op.OpGetNumPipePackets:
        case Op.OpGetMaxPipePackets:
        case Op.OpGroupReserveReadPipePackets:
        case Op.OpGroupReserveWritePipePackets:
        case Op.OpEnqueueMarker:
        case Op.OpEnqueueKernel:
        case Op.OpGetKernelNDrangeSubGroupCount:
        case Op.OpGetKernelNDrangeMaxSubGroupSize:
        case Op.OpGetKernelWorkGroupSize:
        case Op.OpGetKernelPreferredWorkGroupSizeMultiple:
        case Op.OpCreateUserEvent:
        case Op.OpIsValidEvent:
        case Op.OpGetDefaultQueue:
        case Op.OpBuildNDRange:
        case Op.OpImageSparseSampleImplicitLod:
        case Op.OpImageSparseSampleExplicitLod:
        case Op.OpImageSparseSampleDrefImplicitLod:
        case Op.OpImageSparseSampleDrefExplicitLod:
        case Op.OpImageSparseSampleProjImplicitLod:
        case Op.OpImageSparseSampleProjExplicitLod:
        case Op.OpImageSparseSampleProjDrefImplicitLod:
        case Op.OpImageSparseSampleProjDrefExplicitLod:
        case Op.OpImageSparseFetch:
        case Op.OpImageSparseGather:
        case Op.OpImageSparseDrefGather:
        case Op.OpImageSparseTexelsResident:
        case Op.OpAtomicFlagTestAndSet:
        case Op.OpImageSparseRead:
        case Op.OpSizeOf:
        case Op.OpConstantPipeStorage:
        case Op.OpCreatePipeFromPipeStorage:
        case Op.OpGetKernelLocalSizeForSubgroupCount:
        case Op.OpGetKernelMaxNumSubgroups:
        case Op.OpNamedBarrierInitialize:
        case Op.OpGroupNonUniformElect:
        case Op.OpGroupNonUniformAll:
        case Op.OpGroupNonUniformAny:
        case Op.OpGroupNonUniformAllEqual:
        case Op.OpGroupNonUniformBroadcast:
        case Op.OpGroupNonUniformBroadcastFirst:
        case Op.OpGroupNonUniformBallot:
        case Op.OpGroupNonUniformInverseBallot:
        case Op.OpGroupNonUniformBallotBitExtract:
        case Op.OpGroupNonUniformBallotBitCount:
        case Op.OpGroupNonUniformBallotFindLSB:
        case Op.OpGroupNonUniformBallotFindMSB:
        case Op.OpGroupNonUniformShuffle:
        case Op.OpGroupNonUniformShuffleXor:
        case Op.OpGroupNonUniformShuffleUp:
        case Op.OpGroupNonUniformShuffleDown:
        case Op.OpGroupNonUniformIAdd:
        case Op.OpGroupNonUniformFAdd:
        case Op.OpGroupNonUniformIMul:
        case Op.OpGroupNonUniformFMul:
        case Op.OpGroupNonUniformSMin:
        case Op.OpGroupNonUniformUMin:
        case Op.OpGroupNonUniformFMin:
        case Op.OpGroupNonUniformSMax:
        case Op.OpGroupNonUniformUMax:
        case Op.OpGroupNonUniformFMax:
        case Op.OpGroupNonUniformBitwiseAnd:
        case Op.OpGroupNonUniformBitwiseOr:
        case Op.OpGroupNonUniformBitwiseXor:
        case Op.OpGroupNonUniformLogicalAnd:
        case Op.OpGroupNonUniformLogicalOr:
        case Op.OpGroupNonUniformLogicalXor:
        case Op.OpGroupNonUniformQuadBroadcast:
        case Op.OpGroupNonUniformQuadSwap:
        case Op.OpCopyLogical:
        case Op.OpPtrEqual:
        case Op.OpPtrNotEqual:
        case Op.OpPtrDiff:
        case Op.OpColorAttachmentReadEXT:
        case Op.OpDepthAttachmentReadEXT:
        case Op.OpStencilAttachmentReadEXT:
        case Op.OpUntypedVariableKHR:
        case Op.OpUntypedAccessChainKHR:
        case Op.OpUntypedInBoundsAccessChainKHR:
        case Op.OpSubgroupBallotKHR:
        case Op.OpSubgroupFirstInvocationKHR:
        case Op.OpUntypedPtrAccessChainKHR:
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
        case Op.OpUntypedArrayLengthKHR:
        case Op.OpSubgroupAllKHR:
        case Op.OpSubgroupAnyKHR:
        case Op.OpSubgroupAllEqualKHR:
        case Op.OpGroupNonUniformRotateKHR:
        case Op.OpSubgroupReadInvocationKHR:
        case Op.OpExtInstWithForwardRefsKHR:
        case Op.OpConvertUToAccelerationStructureKHR:
        case Op.OpSDot:
        case Op.OpUDot:
        case Op.OpSUDot:
        case Op.OpSDotAccSat:
        case Op.OpUDotAccSat:
        case Op.OpSUDotAccSat:
        case Op.OpCooperativeMatrixLoadKHR:
        case Op.OpCooperativeMatrixMulAddKHR:
        case Op.OpCooperativeMatrixLengthKHR:
        case Op.OpConstantCompositeReplicateEXT:
        case Op.OpSpecConstantCompositeReplicateEXT:
        case Op.OpCompositeConstructReplicateEXT:
        case Op.OpRayQueryProceedKHR:
        case Op.OpRayQueryGetIntersectionTypeKHR:
        case Op.OpImageSampleWeightedQCOM:
        case Op.OpImageBoxFilterQCOM:
        case Op.OpImageBlockMatchSSDQCOM:
        case Op.OpImageBlockMatchSADQCOM:
        case Op.OpImageBlockMatchWindowSSDQCOM:
        case Op.OpImageBlockMatchWindowSADQCOM:
        case Op.OpImageBlockMatchGatherSSDQCOM:
        case Op.OpImageBlockMatchGatherSADQCOM:
        case Op.OpGroupIAddNonUniformAMD:
        case Op.OpGroupFAddNonUniformAMD:
        case Op.OpGroupFMinNonUniformAMD:
        case Op.OpGroupUMinNonUniformAMD:
        case Op.OpGroupSMinNonUniformAMD:
        case Op.OpGroupFMaxNonUniformAMD:
        case Op.OpGroupUMaxNonUniformAMD:
        case Op.OpGroupSMaxNonUniformAMD:
        case Op.OpFragmentMaskFetchAMD:
        case Op.OpFragmentFetchAMD:
        case Op.OpReadClockKHR:
        case Op.OpFinishWritingNodePayloadAMDX:
        case Op.OpGroupNonUniformQuadAllKHR:
        case Op.OpGroupNonUniformQuadAnyKHR:
        case Op.OpHitObjectGetWorldToObjectNV:
        case Op.OpHitObjectGetObjectToWorldNV:
        case Op.OpHitObjectGetObjectRayDirectionNV:
        case Op.OpHitObjectGetObjectRayOriginNV:
        case Op.OpHitObjectGetShaderRecordBufferHandleNV:
        case Op.OpHitObjectGetShaderBindingTableRecordIndexNV:
        case Op.OpHitObjectGetCurrentTimeNV:
        case Op.OpHitObjectGetHitKindNV:
        case Op.OpHitObjectGetPrimitiveIndexNV:
        case Op.OpHitObjectGetGeometryIndexNV:
        case Op.OpHitObjectGetInstanceIdNV:
        case Op.OpHitObjectGetInstanceCustomIndexNV:
        case Op.OpHitObjectGetWorldRayDirectionNV:
        case Op.OpHitObjectGetWorldRayOriginNV:
        case Op.OpHitObjectGetRayTMaxNV:
        case Op.OpHitObjectGetRayTMinNV:
        case Op.OpHitObjectIsEmptyNV:
        case Op.OpHitObjectIsHitNV:
        case Op.OpHitObjectIsMissNV:
        case Op.OpImageSampleFootprintNV:
        case Op.OpGroupNonUniformPartitionNV:
        case Op.OpFetchMicroTriangleVertexPositionNV:
        case Op.OpFetchMicroTriangleVertexBarycentricNV:
        case Op.OpReportIntersectionKHR:
        case Op.OpRayQueryGetIntersectionTriangleVertexPositionsKHR:
        case Op.OpCooperativeMatrixLoadNV:
        case Op.OpCooperativeMatrixMulAddNV:
        case Op.OpCooperativeMatrixLengthNV:
        case Op.OpIsHelperInvocationEXT:
        case Op.OpConvertUToImageNV:
        case Op.OpConvertUToSamplerNV:
        case Op.OpConvertImageToUNV:
        case Op.OpConvertSamplerToUNV:
        case Op.OpConvertUToSampledImageNV:
        case Op.OpConvertSampledImageToUNV:
        case Op.OpRawAccessChainNV:
        case Op.OpSubgroupShuffleINTEL:
        case Op.OpSubgroupShuffleDownINTEL:
        case Op.OpSubgroupShuffleUpINTEL:
        case Op.OpSubgroupShuffleXorINTEL:
        case Op.OpSubgroupBlockReadINTEL:
        case Op.OpSubgroupImageBlockReadINTEL:
        case Op.OpSubgroupImageMediaBlockReadINTEL:
        case Op.OpUCountLeadingZerosINTEL:
        case Op.OpUCountTrailingZerosINTEL:
        case Op.OpAbsISubINTEL:
        case Op.OpAbsUSubINTEL:
        case Op.OpIAddSatINTEL:
        case Op.OpUAddSatINTEL:
        case Op.OpIAverageINTEL:
        case Op.OpUAverageINTEL:
        case Op.OpIAverageRoundedINTEL:
        case Op.OpUAverageRoundedINTEL:
        case Op.OpISubSatINTEL:
        case Op.OpUSubSatINTEL:
        case Op.OpIMul32x16INTEL:
        case Op.OpUMul32x16INTEL:
        case Op.OpConstantFunctionPointerINTEL:
        case Op.OpFunctionPointerCallINTEL:
        case Op.OpAsmTargetINTEL:
        case Op.OpAsmINTEL:
        case Op.OpAsmCallINTEL:
        case Op.OpAtomicFMinEXT:
        case Op.OpAtomicFMaxEXT:
        case Op.OpExpectKHR:
        case Op.OpVmeImageINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
        case Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
        case Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
        case Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
        case Op.OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
        case Op.OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
        case Op.OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
        case Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
        case Op.OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
        case Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL:
        case Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
        case Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
        case Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
        case Op.OpSubgroupAvcMceConvertToImePayloadINTEL:
        case Op.OpSubgroupAvcMceConvertToImeResultINTEL:
        case Op.OpSubgroupAvcMceConvertToRefPayloadINTEL:
        case Op.OpSubgroupAvcMceConvertToRefResultINTEL:
        case Op.OpSubgroupAvcMceConvertToSicPayloadINTEL:
        case Op.OpSubgroupAvcMceConvertToSicResultINTEL:
        case Op.OpSubgroupAvcMceGetMotionVectorsINTEL:
        case Op.OpSubgroupAvcMceGetInterDistortionsINTEL:
        case Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL:
        case Op.OpSubgroupAvcMceGetInterMajorShapeINTEL:
        case Op.OpSubgroupAvcMceGetInterMinorShapeINTEL:
        case Op.OpSubgroupAvcMceGetInterDirectionsINTEL:
        case Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL:
        case Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL:
        case Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
        case Op.OpSubgroupAvcImeInitializeINTEL:
        case Op.OpSubgroupAvcImeSetSingleReferenceINTEL:
        case Op.OpSubgroupAvcImeSetDualReferenceINTEL:
        case Op.OpSubgroupAvcImeRefWindowSizeINTEL:
        case Op.OpSubgroupAvcImeAdjustRefOffsetINTEL:
        case Op.OpSubgroupAvcImeConvertToMcePayloadINTEL:
        case Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
        case Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
        case Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
        case Op.OpSubgroupAvcImeSetWeightedSadINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
        case Op.OpSubgroupAvcImeConvertToMceResultINTEL:
        case Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL:
        case Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
        case Op.OpSubgroupAvcImeGetBorderReachedINTEL:
        case Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
        case Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
        case Op.OpSubgroupAvcFmeInitializeINTEL:
        case Op.OpSubgroupAvcBmeInitializeINTEL:
        case Op.OpSubgroupAvcRefConvertToMcePayloadINTEL:
        case Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
        case Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
        case Op.OpSubgroupAvcRefConvertToMceResultINTEL:
        case Op.OpSubgroupAvcSicInitializeINTEL:
        case Op.OpSubgroupAvcSicConfigureSkcINTEL:
        case Op.OpSubgroupAvcSicConfigureIpeLumaINTEL:
        case Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
        case Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL:
        case Op.OpSubgroupAvcSicConvertToMcePayloadINTEL:
        case Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
        case Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
        case Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
        case Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL:
        case Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
        case Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
        case Op.OpSubgroupAvcSicEvaluateIpeINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
        case Op.OpSubgroupAvcSicConvertToMceResultINTEL:
        case Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL:
        case Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
        case Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
        case Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
        case Op.OpSubgroupAvcSicGetIpeChromaModeINTEL:
        case Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
        case Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
        case Op.OpSubgroupAvcSicGetInterRawSadsINTEL:
        case Op.OpVariableLengthArrayINTEL:
        case Op.OpSaveMemoryINTEL:
        case Op.OpArbitraryFloatSinCosPiINTEL:
        case Op.OpArbitraryFloatCastINTEL:
        case Op.OpArbitraryFloatCastFromIntINTEL:
        case Op.OpArbitraryFloatCastToIntINTEL:
        case Op.OpArbitraryFloatAddINTEL:
        case Op.OpArbitraryFloatSubINTEL:
        case Op.OpArbitraryFloatMulINTEL:
        case Op.OpArbitraryFloatDivINTEL:
        case Op.OpArbitraryFloatGTINTEL:
        case Op.OpArbitraryFloatGEINTEL:
        case Op.OpArbitraryFloatLTINTEL:
        case Op.OpArbitraryFloatLEINTEL:
        case Op.OpArbitraryFloatEQINTEL:
        case Op.OpArbitraryFloatRecipINTEL:
        case Op.OpArbitraryFloatRSqrtINTEL:
        case Op.OpArbitraryFloatCbrtINTEL:
        case Op.OpArbitraryFloatHypotINTEL:
        case Op.OpArbitraryFloatSqrtINTEL:
        case Op.OpArbitraryFloatLogINTEL:
        case Op.OpArbitraryFloatLog2INTEL:
        case Op.OpArbitraryFloatLog10INTEL:
        case Op.OpArbitraryFloatLog1pINTEL:
        case Op.OpArbitraryFloatExpINTEL:
        case Op.OpArbitraryFloatExp2INTEL:
        case Op.OpArbitraryFloatExp10INTEL:
        case Op.OpArbitraryFloatExpm1INTEL:
        case Op.OpArbitraryFloatSinINTEL:
        case Op.OpArbitraryFloatCosINTEL:
        case Op.OpArbitraryFloatSinCosINTEL:
        case Op.OpArbitraryFloatSinPiINTEL:
        case Op.OpArbitraryFloatCosPiINTEL:
        case Op.OpArbitraryFloatASinINTEL:
        case Op.OpArbitraryFloatASinPiINTEL:
        case Op.OpArbitraryFloatACosINTEL:
        case Op.OpArbitraryFloatACosPiINTEL:
        case Op.OpArbitraryFloatATanINTEL:
        case Op.OpArbitraryFloatATanPiINTEL:
        case Op.OpArbitraryFloatATan2INTEL:
        case Op.OpArbitraryFloatPowINTEL:
        case Op.OpArbitraryFloatPowRINTEL:
        case Op.OpArbitraryFloatPowNINTEL:
        case Op.OpFixedSqrtINTEL:
        case Op.OpFixedRecipINTEL:
        case Op.OpFixedRsqrtINTEL:
        case Op.OpFixedSinINTEL:
        case Op.OpFixedCosINTEL:
        case Op.OpFixedSinCosINTEL:
        case Op.OpFixedSinPiINTEL:
        case Op.OpFixedCosPiINTEL:
        case Op.OpFixedSinCosPiINTEL:
        case Op.OpFixedLogINTEL:
        case Op.OpFixedExpINTEL:
        case Op.OpPtrCastToCrossWorkgroupINTEL:
        case Op.OpCrossWorkgroupCastToPtrINTEL:
        case Op.OpReadPipeBlockingINTEL:
        case Op.OpWritePipeBlockingINTEL:
        case Op.OpFPGARegINTEL:
        case Op.OpRayQueryGetRayTMinKHR:
        case Op.OpRayQueryGetRayFlagsKHR:
        case Op.OpRayQueryGetIntersectionTKHR:
        case Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR:
        case Op.OpRayQueryGetIntersectionInstanceIdKHR:
        case Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
        case Op.OpRayQueryGetIntersectionGeometryIndexKHR:
        case Op.OpRayQueryGetIntersectionPrimitiveIndexKHR:
        case Op.OpRayQueryGetIntersectionBarycentricsKHR:
        case Op.OpRayQueryGetIntersectionFrontFaceKHR:
        case Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
        case Op.OpRayQueryGetIntersectionObjectRayDirectionKHR:
        case Op.OpRayQueryGetIntersectionObjectRayOriginKHR:
        case Op.OpRayQueryGetWorldRayDirectionKHR:
        case Op.OpRayQueryGetWorldRayOriginKHR:
        case Op.OpRayQueryGetIntersectionObjectToWorldKHR:
        case Op.OpRayQueryGetIntersectionWorldToObjectKHR:
        case Op.OpAtomicFAddEXT:
        case Op.OpCompositeConstructContinuedINTEL:
        case Op.OpConvertFToBF16INTEL:
        case Op.OpConvertBF16ToFINTEL:
        case Op.OpGroupIMulKHR:
        case Op.OpGroupFMulKHR:
        case Op.OpGroupBitwiseAndKHR:
        case Op.OpGroupBitwiseOrKHR:
        case Op.OpGroupBitwiseXorKHR:
        case Op.OpGroupLogicalAndKHR:
        case Op.OpGroupLogicalOrKHR:
        case Op.OpGroupLogicalXorKHR:
        case Op.OpMaskedGatherINTEL:
            return true;
    }
}

/**
    Gets the minimum number of operands for [Op]
*/
uint getMinLength(Op code) @nogc {
    switch (code) {
        default:
            return 0;
        
        case Op.OpNop:
            return 0;
        case Op.OpUndef:
            return 2;
        case Op.OpSourceContinued:
            return 1;
        case Op.OpSource:
            return 2;
        case Op.OpSourceExtension:
            return 1;
        case Op.OpName:
            return 2;
        case Op.OpMemberName:
            return 3;
        case Op.OpString:
            return 2;
        case Op.OpLine:
            return 3;
        case Op.OpExtension:
            return 1;
        case Op.OpExtInstImport:
            return 2;
        case Op.OpExtInst:
            return 4;
        case Op.OpMemoryModel:
            return 2;
        case Op.OpEntryPoint:
            return 3;
        case Op.OpExecutionMode:
            return 2;
        case Op.OpCapability:
            return 1;
        case Op.OpTypeVoid:
            return 1;
        case Op.OpTypeBool:
            return 1;
        case Op.OpTypeInt:
            return 3;
        case Op.OpTypeFloat:
            return 2;
        case Op.OpTypeVector:
            return 3;
        case Op.OpTypeMatrix:
            return 3;
        case Op.OpTypeImage:
            return 8;
        case Op.OpTypeSampler:
            return 1;
        case Op.OpTypeSampledImage:
            return 2;
        case Op.OpTypeArray:
            return 3;
        case Op.OpTypeRuntimeArray:
            return 2;
        case Op.OpTypeStruct:
            return 1;
        case Op.OpTypeOpaque:
            return 2;
        case Op.OpTypePointer:
            return 3;
        case Op.OpTypeFunction:
            return 2;
        case Op.OpTypeEvent:
            return 1;
        case Op.OpTypeDeviceEvent:
            return 1;
        case Op.OpTypeReserveId:
            return 1;
        case Op.OpTypeQueue:
            return 1;
        case Op.OpTypePipe:
            return 2;
        case Op.OpTypeForwardPointer:
            return 2;
        case Op.OpConstantTrue:
            return 2;
        case Op.OpConstantFalse:
            return 2;
        case Op.OpConstant:
            return 3;
        case Op.OpConstantComposite:
            return 2;
        case Op.OpConstantSampler:
            return 5;
        case Op.OpConstantNull:
            return 2;
        case Op.OpSpecConstantTrue:
            return 2;
        case Op.OpSpecConstantFalse:
            return 2;
        case Op.OpSpecConstant:
            return 3;
        case Op.OpSpecConstantComposite:
            return 2;
        case Op.OpSpecConstantOp:
            return 3;
        case Op.OpFunction:
            return 4;
        case Op.OpFunctionParameter:
            return 2;
        case Op.OpFunctionEnd:
            return 0;
        case Op.OpFunctionCall:
            return 3;
        case Op.OpVariable:
            return 3;
        case Op.OpImageTexelPointer:
            return 5;
        case Op.OpLoad:
            return 3;
        case Op.OpStore:
            return 2;
        case Op.OpCopyMemory:
            return 2;
        case Op.OpCopyMemorySized:
            return 3;
        case Op.OpAccessChain:
            return 3;
        case Op.OpInBoundsAccessChain:
            return 3;
        case Op.OpPtrAccessChain:
            return 4;
        case Op.OpArrayLength:
            return 4;
        case Op.OpGenericPtrMemSemantics:
            return 3;
        case Op.OpInBoundsPtrAccessChain:
            return 4;
        case Op.OpDecorate:
            return 2;
        case Op.OpMemberDecorate:
            return 3;
        case Op.OpDecorationGroup:
            return 1;
        case Op.OpGroupDecorate:
            return 1;
        case Op.OpGroupMemberDecorate:
            return 1;
        case Op.OpVectorExtractDynamic:
            return 4;
        case Op.OpVectorInsertDynamic:
            return 5;
        case Op.OpVectorShuffle:
            return 4;
        case Op.OpCompositeConstruct:
            return 2;
        case Op.OpCompositeExtract:
            return 3;
        case Op.OpCompositeInsert:
            return 4;
        case Op.OpCopyObject:
            return 3;
        case Op.OpTranspose:
            return 3;
        case Op.OpSampledImage:
            return 4;
        case Op.OpImageSampleImplicitLod:
            return 4;
        case Op.OpImageSampleExplicitLod:
            return 5;
        case Op.OpImageSampleDrefImplicitLod:
            return 5;
        case Op.OpImageSampleDrefExplicitLod:
            return 6;
        case Op.OpImageSampleProjImplicitLod:
            return 4;
        case Op.OpImageSampleProjExplicitLod:
            return 5;
        case Op.OpImageSampleProjDrefImplicitLod:
            return 5;
        case Op.OpImageSampleProjDrefExplicitLod:
            return 6;
        case Op.OpImageFetch:
            return 4;
        case Op.OpImageGather:
            return 5;
        case Op.OpImageDrefGather:
            return 5;
        case Op.OpImageRead:
            return 4;
        case Op.OpImageWrite:
            return 3;
        case Op.OpImage:
            return 3;
        case Op.OpImageQueryFormat:
            return 3;
        case Op.OpImageQueryOrder:
            return 3;
        case Op.OpImageQuerySizeLod:
            return 4;
        case Op.OpImageQuerySize:
            return 3;
        case Op.OpImageQueryLod:
            return 4;
        case Op.OpImageQueryLevels:
            return 3;
        case Op.OpImageQuerySamples:
            return 3;
        case Op.OpConvertFToU:
            return 3;
        case Op.OpConvertFToS:
            return 3;
        case Op.OpConvertSToF:
            return 3;
        case Op.OpConvertUToF:
            return 3;
        case Op.OpUConvert:
            return 3;
        case Op.OpSConvert:
            return 3;
        case Op.OpFConvert:
            return 3;
        case Op.OpQuantizeToF16:
            return 3;
        case Op.OpConvertPtrToU:
            return 3;
        case Op.OpSatConvertSToU:
            return 3;
        case Op.OpSatConvertUToS:
            return 3;
        case Op.OpConvertUToPtr:
            return 3;
        case Op.OpPtrCastToGeneric:
            return 3;
        case Op.OpGenericCastToPtr:
            return 3;
        case Op.OpGenericCastToPtrExplicit:
            return 4;
        case Op.OpBitcast:
            return 3;
        case Op.OpSNegate:
            return 3;
        case Op.OpFNegate:
            return 3;
        case Op.OpIAdd:
            return 4;
        case Op.OpFAdd:
            return 4;
        case Op.OpISub:
            return 4;
        case Op.OpFSub:
            return 4;
        case Op.OpIMul:
            return 4;
        case Op.OpFMul:
            return 4;
        case Op.OpUDiv:
            return 4;
        case Op.OpSDiv:
            return 4;
        case Op.OpFDiv:
            return 4;
        case Op.OpUMod:
            return 4;
        case Op.OpSRem:
            return 4;
        case Op.OpSMod:
            return 4;
        case Op.OpFRem:
            return 4;
        case Op.OpFMod:
            return 4;
        case Op.OpVectorTimesScalar:
            return 4;
        case Op.OpMatrixTimesScalar:
            return 4;
        case Op.OpVectorTimesMatrix:
            return 4;
        case Op.OpMatrixTimesVector:
            return 4;
        case Op.OpMatrixTimesMatrix:
            return 4;
        case Op.OpOuterProduct:
            return 4;
        case Op.OpDot:
            return 4;
        case Op.OpIAddCarry:
            return 4;
        case Op.OpISubBorrow:
            return 4;
        case Op.OpUMulExtended:
            return 4;
        case Op.OpSMulExtended:
            return 4;
        case Op.OpAny:
            return 3;
        case Op.OpAll:
            return 3;
        case Op.OpIsNan:
            return 3;
        case Op.OpIsInf:
            return 3;
        case Op.OpIsFinite:
            return 3;
        case Op.OpIsNormal:
            return 3;
        case Op.OpSignBitSet:
            return 3;
        case Op.OpLessOrGreater:
            return 4;
        case Op.OpOrdered:
            return 4;
        case Op.OpUnordered:
            return 4;
        case Op.OpLogicalEqual:
            return 4;
        case Op.OpLogicalNotEqual:
            return 4;
        case Op.OpLogicalOr:
            return 4;
        case Op.OpLogicalAnd:
            return 4;
        case Op.OpLogicalNot:
            return 3;
        case Op.OpSelect:
            return 5;
        case Op.OpIEqual:
            return 4;
        case Op.OpINotEqual:
            return 4;
        case Op.OpUGreaterThan:
            return 4;
        case Op.OpSGreaterThan:
            return 4;
        case Op.OpUGreaterThanEqual:
            return 4;
        case Op.OpSGreaterThanEqual:
            return 4;
        case Op.OpULessThan:
            return 4;
        case Op.OpSLessThan:
            return 4;
        case Op.OpULessThanEqual:
            return 4;
        case Op.OpSLessThanEqual:
            return 4;
        case Op.OpFOrdEqual:
            return 4;
        case Op.OpFUnordEqual:
            return 4;
        case Op.OpFOrdNotEqual:
            return 4;
        case Op.OpFUnordNotEqual:
            return 4;
        case Op.OpFOrdLessThan:
            return 4;
        case Op.OpFUnordLessThan:
            return 4;
        case Op.OpFOrdGreaterThan:
            return 4;
        case Op.OpFUnordGreaterThan:
            return 4;
        case Op.OpFOrdLessThanEqual:
            return 4;
        case Op.OpFUnordLessThanEqual:
            return 4;
        case Op.OpFOrdGreaterThanEqual:
            return 4;
        case Op.OpFUnordGreaterThanEqual:
            return 4;
        case Op.OpShiftRightLogical:
            return 4;
        case Op.OpShiftRightArithmetic:
            return 4;
        case Op.OpShiftLeftLogical:
            return 4;
        case Op.OpBitwiseOr:
            return 4;
        case Op.OpBitwiseXor:
            return 4;
        case Op.OpBitwiseAnd:
            return 4;
        case Op.OpNot:
            return 3;
        case Op.OpBitFieldInsert:
            return 6;
        case Op.OpBitFieldSExtract:
            return 5;
        case Op.OpBitFieldUExtract:
            return 5;
        case Op.OpBitReverse:
            return 3;
        case Op.OpBitCount:
            return 3;
        case Op.OpDPdx:
            return 3;
        case Op.OpDPdy:
            return 3;
        case Op.OpFwidth:
            return 3;
        case Op.OpDPdxFine:
            return 3;
        case Op.OpDPdyFine:
            return 3;
        case Op.OpFwidthFine:
            return 3;
        case Op.OpDPdxCoarse:
            return 3;
        case Op.OpDPdyCoarse:
            return 3;
        case Op.OpFwidthCoarse:
            return 3;
        case Op.OpEmitVertex:
            return 0;
        case Op.OpEndPrimitive:
            return 0;
        case Op.OpEmitStreamVertex:
            return 1;
        case Op.OpEndStreamPrimitive:
            return 1;
        case Op.OpControlBarrier:
            return 3;
        case Op.OpMemoryBarrier:
            return 2;
        case Op.OpAtomicLoad:
            return 5;
        case Op.OpAtomicStore:
            return 4;
        case Op.OpAtomicExchange:
            return 6;
        case Op.OpAtomicCompareExchange:
            return 8;
        case Op.OpAtomicCompareExchangeWeak:
            return 8;
        case Op.OpAtomicIIncrement:
            return 5;
        case Op.OpAtomicIDecrement:
            return 5;
        case Op.OpAtomicIAdd:
            return 6;
        case Op.OpAtomicISub:
            return 6;
        case Op.OpAtomicSMin:
            return 6;
        case Op.OpAtomicUMin:
            return 6;
        case Op.OpAtomicSMax:
            return 6;
        case Op.OpAtomicUMax:
            return 6;
        case Op.OpAtomicAnd:
            return 6;
        case Op.OpAtomicOr:
            return 6;
        case Op.OpAtomicXor:
            return 6;
        case Op.OpPhi:
            return 2;
        case Op.OpLoopMerge:
            return 3;
        case Op.OpSelectionMerge:
            return 2;
        case Op.OpLabel:
            return 1;
        case Op.OpBranch:
            return 1;
        case Op.OpBranchConditional:
            return 3;
        case Op.OpSwitch:
            return 2;
        case Op.OpKill:
            return 0;
        case Op.OpReturn:
            return 0;
        case Op.OpReturnValue:
            return 1;
        case Op.OpUnreachable:
            return 0;
        case Op.OpLifetimeStart:
            return 2;
        case Op.OpLifetimeStop:
            return 2;
        case Op.OpGroupAsyncCopy:
            return 8;
        case Op.OpGroupWaitEvents:
            return 3;
        case Op.OpGroupAll:
            return 4;
        case Op.OpGroupAny:
            return 4;
        case Op.OpGroupBroadcast:
            return 5;
        case Op.OpGroupIAdd:
            return 5;
        case Op.OpGroupFAdd:
            return 5;
        case Op.OpGroupFMin:
            return 5;
        case Op.OpGroupUMin:
            return 5;
        case Op.OpGroupSMin:
            return 5;
        case Op.OpGroupFMax:
            return 5;
        case Op.OpGroupUMax:
            return 5;
        case Op.OpGroupSMax:
            return 5;
        case Op.OpReadPipe:
            return 6;
        case Op.OpWritePipe:
            return 6;
        case Op.OpReservedReadPipe:
            return 8;
        case Op.OpReservedWritePipe:
            return 8;
        case Op.OpReserveReadPipePackets:
            return 6;
        case Op.OpReserveWritePipePackets:
            return 6;
        case Op.OpCommitReadPipe:
            return 4;
        case Op.OpCommitWritePipe:
            return 4;
        case Op.OpIsValidReserveId:
            return 3;
        case Op.OpGetNumPipePackets:
            return 5;
        case Op.OpGetMaxPipePackets:
            return 5;
        case Op.OpGroupReserveReadPipePackets:
            return 7;
        case Op.OpGroupReserveWritePipePackets:
            return 7;
        case Op.OpGroupCommitReadPipe:
            return 5;
        case Op.OpGroupCommitWritePipe:
            return 5;
        case Op.OpEnqueueMarker:
            return 6;
        case Op.OpEnqueueKernel:
            return 12;
        case Op.OpGetKernelNDrangeSubGroupCount:
            return 7;
        case Op.OpGetKernelNDrangeMaxSubGroupSize:
            return 7;
        case Op.OpGetKernelWorkGroupSize:
            return 6;
        case Op.OpGetKernelPreferredWorkGroupSizeMultiple:
            return 6;
        case Op.OpRetainEvent:
            return 1;
        case Op.OpReleaseEvent:
            return 1;
        case Op.OpCreateUserEvent:
            return 2;
        case Op.OpIsValidEvent:
            return 3;
        case Op.OpSetUserEventStatus:
            return 2;
        case Op.OpCaptureEventProfilingInfo:
            return 3;
        case Op.OpGetDefaultQueue:
            return 2;
        case Op.OpBuildNDRange:
            return 5;
        case Op.OpImageSparseSampleImplicitLod:
            return 4;
        case Op.OpImageSparseSampleExplicitLod:
            return 5;
        case Op.OpImageSparseSampleDrefImplicitLod:
            return 5;
        case Op.OpImageSparseSampleDrefExplicitLod:
            return 6;
        case Op.OpImageSparseSampleProjImplicitLod:
            return 4;
        case Op.OpImageSparseSampleProjExplicitLod:
            return 5;
        case Op.OpImageSparseSampleProjDrefImplicitLod:
            return 5;
        case Op.OpImageSparseSampleProjDrefExplicitLod:
            return 6;
        case Op.OpImageSparseFetch:
            return 4;
        case Op.OpImageSparseGather:
            return 5;
        case Op.OpImageSparseDrefGather:
            return 5;
        case Op.OpImageSparseTexelsResident:
            return 3;
        case Op.OpNoLine:
            return 0;
        case Op.OpAtomicFlagTestAndSet:
            return 5;
        case Op.OpAtomicFlagClear:
            return 3;
        case Op.OpImageSparseRead:
            return 4;
        case Op.OpSizeOf:
            return 3;
        case Op.OpTypePipeStorage:
            return 1;
        case Op.OpConstantPipeStorage:
            return 5;
        case Op.OpCreatePipeFromPipeStorage:
            return 3;
        case Op.OpGetKernelLocalSizeForSubgroupCount:
            return 7;
        case Op.OpGetKernelMaxNumSubgroups:
            return 6;
        case Op.OpTypeNamedBarrier:
            return 1;
        case Op.OpNamedBarrierInitialize:
            return 3;
        case Op.OpMemoryNamedBarrier:
            return 3;
        case Op.OpModuleProcessed:
            return 1;
        case Op.OpExecutionModeId:
            return 2;
        case Op.OpDecorateId:
            return 2;
        case Op.OpGroupNonUniformElect:
            return 3;
        case Op.OpGroupNonUniformAll:
            return 4;
        case Op.OpGroupNonUniformAny:
            return 4;
        case Op.OpGroupNonUniformAllEqual:
            return 4;
        case Op.OpGroupNonUniformBroadcast:
            return 5;
        case Op.OpGroupNonUniformBroadcastFirst:
            return 4;
        case Op.OpGroupNonUniformBallot:
            return 4;
        case Op.OpGroupNonUniformInverseBallot:
            return 4;
        case Op.OpGroupNonUniformBallotBitExtract:
            return 5;
        case Op.OpGroupNonUniformBallotBitCount:
            return 5;
        case Op.OpGroupNonUniformBallotFindLSB:
            return 4;
        case Op.OpGroupNonUniformBallotFindMSB:
            return 4;
        case Op.OpGroupNonUniformShuffle:
            return 5;
        case Op.OpGroupNonUniformShuffleXor:
            return 5;
        case Op.OpGroupNonUniformShuffleUp:
            return 5;
        case Op.OpGroupNonUniformShuffleDown:
            return 5;
        case Op.OpGroupNonUniformIAdd:
            return 5;
        case Op.OpGroupNonUniformFAdd:
            return 5;
        case Op.OpGroupNonUniformIMul:
            return 5;
        case Op.OpGroupNonUniformFMul:
            return 5;
        case Op.OpGroupNonUniformSMin:
            return 5;
        case Op.OpGroupNonUniformUMin:
            return 5;
        case Op.OpGroupNonUniformFMin:
            return 5;
        case Op.OpGroupNonUniformSMax:
            return 5;
        case Op.OpGroupNonUniformUMax:
            return 5;
        case Op.OpGroupNonUniformFMax:
            return 5;
        case Op.OpGroupNonUniformBitwiseAnd:
            return 5;
        case Op.OpGroupNonUniformBitwiseOr:
            return 5;
        case Op.OpGroupNonUniformBitwiseXor:
            return 5;
        case Op.OpGroupNonUniformLogicalAnd:
            return 5;
        case Op.OpGroupNonUniformLogicalOr:
            return 5;
        case Op.OpGroupNonUniformLogicalXor:
            return 5;
        case Op.OpGroupNonUniformQuadBroadcast:
            return 5;
        case Op.OpGroupNonUniformQuadSwap:
            return 5;
        case Op.OpCopyLogical:
            return 3;
        case Op.OpPtrEqual:
            return 4;
        case Op.OpPtrNotEqual:
            return 4;
        case Op.OpPtrDiff:
            return 4;
        case Op.OpColorAttachmentReadEXT:
            return 3;
        case Op.OpDepthAttachmentReadEXT:
            return 2;
        case Op.OpStencilAttachmentReadEXT:
            return 2;
        case Op.OpTerminateInvocation:
            return 0;
        case Op.OpTypeUntypedPointerKHR:
            return 2;
        case Op.OpUntypedVariableKHR:
            return 3;
        case Op.OpUntypedAccessChainKHR:
            return 4;
        case Op.OpUntypedInBoundsAccessChainKHR:
            return 4;
        case Op.OpSubgroupBallotKHR:
            return 3;
        case Op.OpSubgroupFirstInvocationKHR:
            return 3;
        case Op.OpUntypedPtrAccessChainKHR:
            return 5;
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
            return 5;
        case Op.OpUntypedArrayLengthKHR:
            return 5;
        case Op.OpUntypedPrefetchKHR:
            return 2;
        case Op.OpSubgroupAllKHR:
            return 3;
        case Op.OpSubgroupAnyKHR:
            return 3;
        case Op.OpSubgroupAllEqualKHR:
            return 3;
        case Op.OpGroupNonUniformRotateKHR:
            return 5;
        case Op.OpSubgroupReadInvocationKHR:
            return 4;
        case Op.OpExtInstWithForwardRefsKHR:
            return 4;
        case Op.OpTraceRayKHR:
            return 11;
        case Op.OpExecuteCallableKHR:
            return 2;
        case Op.OpConvertUToAccelerationStructureKHR:
            return 3;
        case Op.OpIgnoreIntersectionKHR:
            return 0;
        case Op.OpTerminateRayKHR:
            return 0;
        case Op.OpSDot:
            return 4;
        case Op.OpUDot:
            return 4;
        case Op.OpSUDot:
            return 4;
        case Op.OpSDotAccSat:
            return 5;
        case Op.OpUDotAccSat:
            return 5;
        case Op.OpSUDotAccSat:
            return 5;
        case Op.OpTypeCooperativeMatrixKHR:
            return 6;
        case Op.OpCooperativeMatrixLoadKHR:
            return 4;
        case Op.OpCooperativeMatrixStoreKHR:
            return 3;
        case Op.OpCooperativeMatrixMulAddKHR:
            return 5;
        case Op.OpCooperativeMatrixLengthKHR:
            return 3;
        case Op.OpConstantCompositeReplicateEXT:
            return 3;
        case Op.OpSpecConstantCompositeReplicateEXT:
            return 3;
        case Op.OpCompositeConstructReplicateEXT:
            return 3;
        case Op.OpTypeRayQueryKHR:
            return 1;
        case Op.OpRayQueryInitializeKHR:
            return 8;
        case Op.OpRayQueryTerminateKHR:
            return 1;
        case Op.OpRayQueryGenerateIntersectionKHR:
            return 2;
        case Op.OpRayQueryConfirmIntersectionKHR:
            return 1;
        case Op.OpRayQueryProceedKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionTypeKHR:
            return 4;
        case Op.OpImageSampleWeightedQCOM:
            return 5;
        case Op.OpImageBoxFilterQCOM:
            return 5;
        case Op.OpImageBlockMatchSSDQCOM:
            return 7;
        case Op.OpImageBlockMatchSADQCOM:
            return 7;
        case Op.OpImageBlockMatchWindowSSDQCOM:
            return 7;
        case Op.OpImageBlockMatchWindowSADQCOM:
            return 7;
        case Op.OpImageBlockMatchGatherSSDQCOM:
            return 7;
        case Op.OpImageBlockMatchGatherSADQCOM:
            return 7;
        case Op.OpGroupIAddNonUniformAMD:
            return 5;
        case Op.OpGroupFAddNonUniformAMD:
            return 5;
        case Op.OpGroupFMinNonUniformAMD:
            return 5;
        case Op.OpGroupUMinNonUniformAMD:
            return 5;
        case Op.OpGroupSMinNonUniformAMD:
            return 5;
        case Op.OpGroupFMaxNonUniformAMD:
            return 5;
        case Op.OpGroupUMaxNonUniformAMD:
            return 5;
        case Op.OpGroupSMaxNonUniformAMD:
            return 5;
        case Op.OpFragmentMaskFetchAMD:
            return 4;
        case Op.OpFragmentFetchAMD:
            return 5;
        case Op.OpReadClockKHR:
            return 3;
        case Op.OpFinalizeNodePayloadsAMDX:
            return 1;
        case Op.OpFinishWritingNodePayloadAMDX:
            return 3;
        case Op.OpInitializeNodePayloadsAMDX:
            return 4;
        case Op.OpGroupNonUniformQuadAllKHR:
            return 3;
        case Op.OpGroupNonUniformQuadAnyKHR:
            return 3;
        case Op.OpHitObjectRecordHitMotionNV:
            return 14;
        case Op.OpHitObjectRecordHitWithIndexMotionNV:
            return 13;
        case Op.OpHitObjectRecordMissMotionNV:
            return 7;
        case Op.OpHitObjectGetWorldToObjectNV:
            return 3;
        case Op.OpHitObjectGetObjectToWorldNV:
            return 3;
        case Op.OpHitObjectGetObjectRayDirectionNV:
            return 3;
        case Op.OpHitObjectGetObjectRayOriginNV:
            return 3;
        case Op.OpHitObjectTraceRayMotionNV:
            return 13;
        case Op.OpHitObjectGetShaderRecordBufferHandleNV:
            return 3;
        case Op.OpHitObjectGetShaderBindingTableRecordIndexNV:
            return 3;
        case Op.OpHitObjectRecordEmptyNV:
            return 1;
        case Op.OpHitObjectTraceRayNV:
            return 12;
        case Op.OpHitObjectRecordHitNV:
            return 13;
        case Op.OpHitObjectRecordHitWithIndexNV:
            return 12;
        case Op.OpHitObjectRecordMissNV:
            return 6;
        case Op.OpHitObjectExecuteShaderNV:
            return 2;
        case Op.OpHitObjectGetCurrentTimeNV:
            return 3;
        case Op.OpHitObjectGetAttributesNV:
            return 2;
        case Op.OpHitObjectGetHitKindNV:
            return 3;
        case Op.OpHitObjectGetPrimitiveIndexNV:
            return 3;
        case Op.OpHitObjectGetGeometryIndexNV:
            return 3;
        case Op.OpHitObjectGetInstanceIdNV:
            return 3;
        case Op.OpHitObjectGetInstanceCustomIndexNV:
            return 3;
        case Op.OpHitObjectGetWorldRayDirectionNV:
            return 3;
        case Op.OpHitObjectGetWorldRayOriginNV:
            return 3;
        case Op.OpHitObjectGetRayTMaxNV:
            return 3;
        case Op.OpHitObjectGetRayTMinNV:
            return 3;
        case Op.OpHitObjectIsEmptyNV:
            return 3;
        case Op.OpHitObjectIsHitNV:
            return 3;
        case Op.OpHitObjectIsMissNV:
            return 3;
        case Op.OpReorderThreadWithHitObjectNV:
            return 1;
        case Op.OpReorderThreadWithHintNV:
            return 2;
        case Op.OpTypeHitObjectNV:
            return 1;
        case Op.OpImageSampleFootprintNV:
            return 6;
        case Op.OpEmitMeshTasksEXT:
            return 3;
        case Op.OpSetMeshOutputsEXT:
            return 2;
        case Op.OpGroupNonUniformPartitionNV:
            return 3;
        case Op.OpWritePackedPrimitiveIndices4x8NV:
            return 2;
        case Op.OpFetchMicroTriangleVertexPositionNV:
            return 7;
        case Op.OpFetchMicroTriangleVertexBarycentricNV:
            return 7;
        case Op.OpReportIntersectionKHR:
            return 4;
        case Op.OpIgnoreIntersectionNV:
            return 0;
        case Op.OpTerminateRayNV:
            return 0;
        case Op.OpTraceNV:
            return 11;
        case Op.OpTraceMotionNV:
            return 12;
        case Op.OpTraceRayMotionNV:
            return 12;
        case Op.OpRayQueryGetIntersectionTriangleVertexPositionsKHR:
            return 4;
        case Op.OpTypeAccelerationStructureKHR:
            return 1;
        case Op.OpExecuteCallableNV:
            return 2;
        case Op.OpTypeCooperativeMatrixNV:
            return 5;
        case Op.OpCooperativeMatrixLoadNV:
            return 5;
        case Op.OpCooperativeMatrixStoreNV:
            return 4;
        case Op.OpCooperativeMatrixMulAddNV:
            return 5;
        case Op.OpCooperativeMatrixLengthNV:
            return 3;
        case Op.OpBeginInvocationInterlockEXT:
            return 0;
        case Op.OpEndInvocationInterlockEXT:
            return 0;
        case Op.OpDemoteToHelperInvocation:
            return 0;
        case Op.OpIsHelperInvocationEXT:
            return 2;
        case Op.OpConvertUToImageNV:
            return 3;
        case Op.OpConvertUToSamplerNV:
            return 3;
        case Op.OpConvertImageToUNV:
            return 3;
        case Op.OpConvertSamplerToUNV:
            return 3;
        case Op.OpConvertUToSampledImageNV:
            return 3;
        case Op.OpConvertSampledImageToUNV:
            return 3;
        case Op.OpSamplerImageAddressingModeNV:
            return 1;
        case Op.OpRawAccessChainNV:
            return 6;
        case Op.OpSubgroupShuffleINTEL:
            return 4;
        case Op.OpSubgroupShuffleDownINTEL:
            return 5;
        case Op.OpSubgroupShuffleUpINTEL:
            return 5;
        case Op.OpSubgroupShuffleXorINTEL:
            return 4;
        case Op.OpSubgroupBlockReadINTEL:
            return 3;
        case Op.OpSubgroupBlockWriteINTEL:
            return 2;
        case Op.OpSubgroupImageBlockReadINTEL:
            return 4;
        case Op.OpSubgroupImageBlockWriteINTEL:
            return 3;
        case Op.OpSubgroupImageMediaBlockReadINTEL:
            return 6;
        case Op.OpSubgroupImageMediaBlockWriteINTEL:
            return 5;
        case Op.OpUCountLeadingZerosINTEL:
            return 3;
        case Op.OpUCountTrailingZerosINTEL:
            return 3;
        case Op.OpAbsISubINTEL:
            return 4;
        case Op.OpAbsUSubINTEL:
            return 4;
        case Op.OpIAddSatINTEL:
            return 4;
        case Op.OpUAddSatINTEL:
            return 4;
        case Op.OpIAverageINTEL:
            return 4;
        case Op.OpUAverageINTEL:
            return 4;
        case Op.OpIAverageRoundedINTEL:
            return 4;
        case Op.OpUAverageRoundedINTEL:
            return 4;
        case Op.OpISubSatINTEL:
            return 4;
        case Op.OpUSubSatINTEL:
            return 4;
        case Op.OpIMul32x16INTEL:
            return 4;
        case Op.OpUMul32x16INTEL:
            return 4;
        case Op.OpConstantFunctionPointerINTEL:
            return 3;
        case Op.OpFunctionPointerCallINTEL:
            return 2;
        case Op.OpAsmTargetINTEL:
            return 3;
        case Op.OpAsmINTEL:
            return 6;
        case Op.OpAsmCallINTEL:
            return 3;
        case Op.OpAtomicFMinEXT:
            return 6;
        case Op.OpAtomicFMaxEXT:
            return 6;
        case Op.OpAssumeTrueKHR:
            return 1;
        case Op.OpExpectKHR:
            return 4;
        case Op.OpDecorateString:
            return 2;
        case Op.OpMemberDecorateString:
            return 3;
        case Op.OpVmeImageINTEL:
            return 4;
        case Op.OpTypeVmeImageINTEL:
            return 2;
        case Op.OpTypeAvcImePayloadINTEL:
            return 1;
        case Op.OpTypeAvcRefPayloadINTEL:
            return 1;
        case Op.OpTypeAvcSicPayloadINTEL:
            return 1;
        case Op.OpTypeAvcMcePayloadINTEL:
            return 1;
        case Op.OpTypeAvcMceResultINTEL:
            return 1;
        case Op.OpTypeAvcImeResultINTEL:
            return 1;
        case Op.OpTypeAvcImeResultSingleReferenceStreamoutINTEL:
            return 1;
        case Op.OpTypeAvcImeResultDualReferenceStreamoutINTEL:
            return 1;
        case Op.OpTypeAvcImeSingleReferenceStreaminINTEL:
            return 1;
        case Op.OpTypeAvcImeDualReferenceStreaminINTEL:
            return 1;
        case Op.OpTypeAvcRefResultINTEL:
            return 1;
        case Op.OpTypeAvcSicResultINTEL:
            return 1;
        case Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
            return 2;
        case Op.OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
            return 2;
        case Op.OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
            return 2;
        case Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
            return 6;
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
            return 2;
        case Op.OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
            return 2;
        case Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL:
            return 3;
        case Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
            return 5;
        case Op.OpSubgroupAvcMceConvertToImePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToImeResultINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToRefPayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToRefResultINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToSicPayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToSicResultINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetMotionVectorsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterDistortionsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterMajorShapeINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterMinorShapeINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterDirectionsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
            return 5;
        case Op.OpSubgroupAvcImeInitializeINTEL:
            return 5;
        case Op.OpSubgroupAvcImeSetSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcImeSetDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcImeRefWindowSizeINTEL:
            return 4;
        case Op.OpSubgroupAvcImeAdjustRefOffsetINTEL:
            return 6;
        case Op.OpSubgroupAvcImeConvertToMcePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
            return 4;
        case Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
            return 3;
        case Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
            return 4;
        case Op.OpSubgroupAvcImeSetWeightedSadINTEL:
            return 4;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
            return 7;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
            return 5;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
            return 7;
        case Op.OpSubgroupAvcImeConvertToMceResultINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL:
            return 3;
        case Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
            return 3;
        case Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
            return 5;
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
            return 5;
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
            return 5;
        case Op.OpSubgroupAvcImeGetBorderReachedINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
            return 3;
        case Op.OpSubgroupAvcFmeInitializeINTEL:
            return 9;
        case Op.OpSubgroupAvcBmeInitializeINTEL:
            return 10;
        case Op.OpSubgroupAvcRefConvertToMcePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
            return 3;
        case Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL:
            return 3;
        case Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
            return 6;
        case Op.OpSubgroupAvcRefConvertToMceResultINTEL:
            return 3;
        case Op.OpSubgroupAvcSicInitializeINTEL:
            return 3;
        case Op.OpSubgroupAvcSicConfigureSkcINTEL:
            return 8;
        case Op.OpSubgroupAvcSicConfigureIpeLumaINTEL:
            return 10;
        case Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
            return 13;
        case Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL:
            return 4;
        case Op.OpSubgroupAvcSicConvertToMcePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
            return 6;
        case Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
            return 4;
        case Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL:
            return 3;
        case Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
            return 4;
        case Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
            return 4;
        case Op.OpSubgroupAvcSicEvaluateIpeINTEL:
            return 4;
        case Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
            return 6;
        case Op.OpSubgroupAvcSicConvertToMceResultINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetIpeChromaModeINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetInterRawSadsINTEL:
            return 3;
        case Op.OpVariableLengthArrayINTEL:
            return 3;
        case Op.OpSaveMemoryINTEL:
            return 2;
        case Op.OpRestoreMemoryINTEL:
            return 1;
        case Op.OpArbitraryFloatSinCosPiINTEL:
            return 9;
        case Op.OpArbitraryFloatCastINTEL:
            return 8;
        case Op.OpArbitraryFloatCastFromIntINTEL:
            return 8;
        case Op.OpArbitraryFloatCastToIntINTEL:
            return 7;
        case Op.OpArbitraryFloatAddINTEL:
            return 10;
        case Op.OpArbitraryFloatSubINTEL:
            return 10;
        case Op.OpArbitraryFloatMulINTEL:
            return 10;
        case Op.OpArbitraryFloatDivINTEL:
            return 10;
        case Op.OpArbitraryFloatGTINTEL:
            return 6;
        case Op.OpArbitraryFloatGEINTEL:
            return 6;
        case Op.OpArbitraryFloatLTINTEL:
            return 6;
        case Op.OpArbitraryFloatLEINTEL:
            return 6;
        case Op.OpArbitraryFloatEQINTEL:
            return 6;
        case Op.OpArbitraryFloatRecipINTEL:
            return 8;
        case Op.OpArbitraryFloatRSqrtINTEL:
            return 8;
        case Op.OpArbitraryFloatCbrtINTEL:
            return 8;
        case Op.OpArbitraryFloatHypotINTEL:
            return 10;
        case Op.OpArbitraryFloatSqrtINTEL:
            return 8;
        case Op.OpArbitraryFloatLogINTEL:
            return 8;
        case Op.OpArbitraryFloatLog2INTEL:
            return 8;
        case Op.OpArbitraryFloatLog10INTEL:
            return 8;
        case Op.OpArbitraryFloatLog1pINTEL:
            return 8;
        case Op.OpArbitraryFloatExpINTEL:
            return 8;
        case Op.OpArbitraryFloatExp2INTEL:
            return 8;
        case Op.OpArbitraryFloatExp10INTEL:
            return 8;
        case Op.OpArbitraryFloatExpm1INTEL:
            return 8;
        case Op.OpArbitraryFloatSinINTEL:
            return 8;
        case Op.OpArbitraryFloatCosINTEL:
            return 8;
        case Op.OpArbitraryFloatSinCosINTEL:
            return 8;
        case Op.OpArbitraryFloatSinPiINTEL:
            return 8;
        case Op.OpArbitraryFloatCosPiINTEL:
            return 8;
        case Op.OpArbitraryFloatASinINTEL:
            return 8;
        case Op.OpArbitraryFloatASinPiINTEL:
            return 8;
        case Op.OpArbitraryFloatACosINTEL:
            return 8;
        case Op.OpArbitraryFloatACosPiINTEL:
            return 8;
        case Op.OpArbitraryFloatATanINTEL:
            return 8;
        case Op.OpArbitraryFloatATanPiINTEL:
            return 8;
        case Op.OpArbitraryFloatATan2INTEL:
            return 10;
        case Op.OpArbitraryFloatPowINTEL:
            return 10;
        case Op.OpArbitraryFloatPowRINTEL:
            return 10;
        case Op.OpArbitraryFloatPowNINTEL:
            return 9;
        case Op.OpLoopControlINTEL:
            return 0;
        case Op.OpAliasDomainDeclINTEL:
            return 1;
        case Op.OpAliasScopeDeclINTEL:
            return 2;
        case Op.OpAliasScopeListDeclINTEL:
            return 1;
        case Op.OpFixedSqrtINTEL:
            return 9;
        case Op.OpFixedRecipINTEL:
            return 9;
        case Op.OpFixedRsqrtINTEL:
            return 9;
        case Op.OpFixedSinINTEL:
            return 9;
        case Op.OpFixedCosINTEL:
            return 9;
        case Op.OpFixedSinCosINTEL:
            return 9;
        case Op.OpFixedSinPiINTEL:
            return 9;
        case Op.OpFixedCosPiINTEL:
            return 9;
        case Op.OpFixedSinCosPiINTEL:
            return 9;
        case Op.OpFixedLogINTEL:
            return 9;
        case Op.OpFixedExpINTEL:
            return 9;
        case Op.OpPtrCastToCrossWorkgroupINTEL:
            return 3;
        case Op.OpCrossWorkgroupCastToPtrINTEL:
            return 3;
        case Op.OpReadPipeBlockingINTEL:
            return 4;
        case Op.OpWritePipeBlockingINTEL:
            return 4;
        case Op.OpFPGARegINTEL:
            return 4;
        case Op.OpRayQueryGetRayTMinKHR:
            return 3;
        case Op.OpRayQueryGetRayFlagsKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionTKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionInstanceIdKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionGeometryIndexKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionPrimitiveIndexKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionBarycentricsKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionFrontFaceKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionObjectRayDirectionKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionObjectRayOriginKHR:
            return 4;
        case Op.OpRayQueryGetWorldRayDirectionKHR:
            return 3;
        case Op.OpRayQueryGetWorldRayOriginKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionObjectToWorldKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionWorldToObjectKHR:
            return 4;
        case Op.OpAtomicFAddEXT:
            return 6;
        case Op.OpTypeBufferSurfaceINTEL:
            return 2;
        case Op.OpTypeStructContinuedINTEL:
            return 0;
        case Op.OpConstantCompositeContinuedINTEL:
            return 0;
        case Op.OpSpecConstantCompositeContinuedINTEL:
            return 0;
        case Op.OpCompositeConstructContinuedINTEL:
            return 2;
        case Op.OpConvertFToBF16INTEL:
            return 3;
        case Op.OpConvertBF16ToFINTEL:
            return 3;
        case Op.OpControlBarrierArriveINTEL:
            return 3;
        case Op.OpControlBarrierWaitINTEL:
            return 3;
        case Op.OpSubgroupBlockPrefetchINTEL:
            return 2;
        case Op.OpGroupIMulKHR:
            return 5;
        case Op.OpGroupFMulKHR:
            return 5;
        case Op.OpGroupBitwiseAndKHR:
            return 5;
        case Op.OpGroupBitwiseOrKHR:
            return 5;
        case Op.OpGroupBitwiseXorKHR:
            return 5;
        case Op.OpGroupLogicalAndKHR:
            return 5;
        case Op.OpGroupLogicalOrKHR:
            return 5;
        case Op.OpGroupLogicalXorKHR:
            return 5;
        case Op.OpMaskedGatherINTEL:
            return 6;
        case Op.OpMaskedScatterINTEL:
            return 4;
    }
}

/**
    Gets the maximum number of operands for [Op]
*/
uint getMaxLength(Op code) @nogc {
    switch (code) {
        default:
            return 0;
        
        case Op.OpNop:
            return 0;
        case Op.OpUndef:
            return 2;
        case Op.OpSourceContinued:
            return 65535;
        case Op.OpSource:
            return 65535;
        case Op.OpSourceExtension:
            return 65535;
        case Op.OpName:
            return 65535;
        case Op.OpMemberName:
            return 65535;
        case Op.OpString:
            return 65535;
        case Op.OpLine:
            return 3;
        case Op.OpExtension:
            return 65535;
        case Op.OpExtInstImport:
            return 65535;
        case Op.OpExtInst:
            return 65535;
        case Op.OpMemoryModel:
            return 2;
        case Op.OpEntryPoint:
            return 65535;
        case Op.OpExecutionMode:
            return 2;
        case Op.OpCapability:
            return 1;
        case Op.OpTypeVoid:
            return 1;
        case Op.OpTypeBool:
            return 1;
        case Op.OpTypeInt:
            return 3;
        case Op.OpTypeFloat:
            return 3;
        case Op.OpTypeVector:
            return 3;
        case Op.OpTypeMatrix:
            return 3;
        case Op.OpTypeImage:
            return 9;
        case Op.OpTypeSampler:
            return 1;
        case Op.OpTypeSampledImage:
            return 2;
        case Op.OpTypeArray:
            return 3;
        case Op.OpTypeRuntimeArray:
            return 2;
        case Op.OpTypeStruct:
            return 65535;
        case Op.OpTypeOpaque:
            return 65535;
        case Op.OpTypePointer:
            return 3;
        case Op.OpTypeFunction:
            return 65535;
        case Op.OpTypeEvent:
            return 1;
        case Op.OpTypeDeviceEvent:
            return 1;
        case Op.OpTypeReserveId:
            return 1;
        case Op.OpTypeQueue:
            return 1;
        case Op.OpTypePipe:
            return 2;
        case Op.OpTypeForwardPointer:
            return 2;
        case Op.OpConstantTrue:
            return 2;
        case Op.OpConstantFalse:
            return 2;
        case Op.OpConstant:
            return 3;
        case Op.OpConstantComposite:
            return 65535;
        case Op.OpConstantSampler:
            return 5;
        case Op.OpConstantNull:
            return 2;
        case Op.OpSpecConstantTrue:
            return 2;
        case Op.OpSpecConstantFalse:
            return 2;
        case Op.OpSpecConstant:
            return 3;
        case Op.OpSpecConstantComposite:
            return 65535;
        case Op.OpSpecConstantOp:
            return 3;
        case Op.OpFunction:
            return 4;
        case Op.OpFunctionParameter:
            return 2;
        case Op.OpFunctionEnd:
            return 0;
        case Op.OpFunctionCall:
            return 65535;
        case Op.OpVariable:
            return 4;
        case Op.OpImageTexelPointer:
            return 5;
        case Op.OpLoad:
            return 4;
        case Op.OpStore:
            return 3;
        case Op.OpCopyMemory:
            return 4;
        case Op.OpCopyMemorySized:
            return 5;
        case Op.OpAccessChain:
            return 65535;
        case Op.OpInBoundsAccessChain:
            return 65535;
        case Op.OpPtrAccessChain:
            return 65535;
        case Op.OpArrayLength:
            return 4;
        case Op.OpGenericPtrMemSemantics:
            return 3;
        case Op.OpInBoundsPtrAccessChain:
            return 65535;
        case Op.OpDecorate:
            return 65535;
        case Op.OpMemberDecorate:
            return 65535;
        case Op.OpDecorationGroup:
            return 1;
        case Op.OpGroupDecorate:
            return 65535;
        case Op.OpGroupMemberDecorate:
            return 65535;
        case Op.OpVectorExtractDynamic:
            return 4;
        case Op.OpVectorInsertDynamic:
            return 5;
        case Op.OpVectorShuffle:
            return 65535;
        case Op.OpCompositeConstruct:
            return 65535;
        case Op.OpCompositeExtract:
            return 65535;
        case Op.OpCompositeInsert:
            return 65535;
        case Op.OpCopyObject:
            return 3;
        case Op.OpTranspose:
            return 3;
        case Op.OpSampledImage:
            return 4;
        case Op.OpImageSampleImplicitLod:
            return 5;
        case Op.OpImageSampleExplicitLod:
            return 5;
        case Op.OpImageSampleDrefImplicitLod:
            return 6;
        case Op.OpImageSampleDrefExplicitLod:
            return 6;
        case Op.OpImageSampleProjImplicitLod:
            return 5;
        case Op.OpImageSampleProjExplicitLod:
            return 5;
        case Op.OpImageSampleProjDrefImplicitLod:
            return 6;
        case Op.OpImageSampleProjDrefExplicitLod:
            return 6;
        case Op.OpImageFetch:
            return 5;
        case Op.OpImageGather:
            return 6;
        case Op.OpImageDrefGather:
            return 6;
        case Op.OpImageRead:
            return 5;
        case Op.OpImageWrite:
            return 4;
        case Op.OpImage:
            return 3;
        case Op.OpImageQueryFormat:
            return 3;
        case Op.OpImageQueryOrder:
            return 3;
        case Op.OpImageQuerySizeLod:
            return 4;
        case Op.OpImageQuerySize:
            return 3;
        case Op.OpImageQueryLod:
            return 4;
        case Op.OpImageQueryLevels:
            return 3;
        case Op.OpImageQuerySamples:
            return 3;
        case Op.OpConvertFToU:
            return 3;
        case Op.OpConvertFToS:
            return 3;
        case Op.OpConvertSToF:
            return 3;
        case Op.OpConvertUToF:
            return 3;
        case Op.OpUConvert:
            return 3;
        case Op.OpSConvert:
            return 3;
        case Op.OpFConvert:
            return 3;
        case Op.OpQuantizeToF16:
            return 3;
        case Op.OpConvertPtrToU:
            return 3;
        case Op.OpSatConvertSToU:
            return 3;
        case Op.OpSatConvertUToS:
            return 3;
        case Op.OpConvertUToPtr:
            return 3;
        case Op.OpPtrCastToGeneric:
            return 3;
        case Op.OpGenericCastToPtr:
            return 3;
        case Op.OpGenericCastToPtrExplicit:
            return 4;
        case Op.OpBitcast:
            return 3;
        case Op.OpSNegate:
            return 3;
        case Op.OpFNegate:
            return 3;
        case Op.OpIAdd:
            return 4;
        case Op.OpFAdd:
            return 4;
        case Op.OpISub:
            return 4;
        case Op.OpFSub:
            return 4;
        case Op.OpIMul:
            return 4;
        case Op.OpFMul:
            return 4;
        case Op.OpUDiv:
            return 4;
        case Op.OpSDiv:
            return 4;
        case Op.OpFDiv:
            return 4;
        case Op.OpUMod:
            return 4;
        case Op.OpSRem:
            return 4;
        case Op.OpSMod:
            return 4;
        case Op.OpFRem:
            return 4;
        case Op.OpFMod:
            return 4;
        case Op.OpVectorTimesScalar:
            return 4;
        case Op.OpMatrixTimesScalar:
            return 4;
        case Op.OpVectorTimesMatrix:
            return 4;
        case Op.OpMatrixTimesVector:
            return 4;
        case Op.OpMatrixTimesMatrix:
            return 4;
        case Op.OpOuterProduct:
            return 4;
        case Op.OpDot:
            return 4;
        case Op.OpIAddCarry:
            return 4;
        case Op.OpISubBorrow:
            return 4;
        case Op.OpUMulExtended:
            return 4;
        case Op.OpSMulExtended:
            return 4;
        case Op.OpAny:
            return 3;
        case Op.OpAll:
            return 3;
        case Op.OpIsNan:
            return 3;
        case Op.OpIsInf:
            return 3;
        case Op.OpIsFinite:
            return 3;
        case Op.OpIsNormal:
            return 3;
        case Op.OpSignBitSet:
            return 3;
        case Op.OpLessOrGreater:
            return 4;
        case Op.OpOrdered:
            return 4;
        case Op.OpUnordered:
            return 4;
        case Op.OpLogicalEqual:
            return 4;
        case Op.OpLogicalNotEqual:
            return 4;
        case Op.OpLogicalOr:
            return 4;
        case Op.OpLogicalAnd:
            return 4;
        case Op.OpLogicalNot:
            return 3;
        case Op.OpSelect:
            return 5;
        case Op.OpIEqual:
            return 4;
        case Op.OpINotEqual:
            return 4;
        case Op.OpUGreaterThan:
            return 4;
        case Op.OpSGreaterThan:
            return 4;
        case Op.OpUGreaterThanEqual:
            return 4;
        case Op.OpSGreaterThanEqual:
            return 4;
        case Op.OpULessThan:
            return 4;
        case Op.OpSLessThan:
            return 4;
        case Op.OpULessThanEqual:
            return 4;
        case Op.OpSLessThanEqual:
            return 4;
        case Op.OpFOrdEqual:
            return 4;
        case Op.OpFUnordEqual:
            return 4;
        case Op.OpFOrdNotEqual:
            return 4;
        case Op.OpFUnordNotEqual:
            return 4;
        case Op.OpFOrdLessThan:
            return 4;
        case Op.OpFUnordLessThan:
            return 4;
        case Op.OpFOrdGreaterThan:
            return 4;
        case Op.OpFUnordGreaterThan:
            return 4;
        case Op.OpFOrdLessThanEqual:
            return 4;
        case Op.OpFUnordLessThanEqual:
            return 4;
        case Op.OpFOrdGreaterThanEqual:
            return 4;
        case Op.OpFUnordGreaterThanEqual:
            return 4;
        case Op.OpShiftRightLogical:
            return 4;
        case Op.OpShiftRightArithmetic:
            return 4;
        case Op.OpShiftLeftLogical:
            return 4;
        case Op.OpBitwiseOr:
            return 4;
        case Op.OpBitwiseXor:
            return 4;
        case Op.OpBitwiseAnd:
            return 4;
        case Op.OpNot:
            return 3;
        case Op.OpBitFieldInsert:
            return 6;
        case Op.OpBitFieldSExtract:
            return 5;
        case Op.OpBitFieldUExtract:
            return 5;
        case Op.OpBitReverse:
            return 3;
        case Op.OpBitCount:
            return 3;
        case Op.OpDPdx:
            return 3;
        case Op.OpDPdy:
            return 3;
        case Op.OpFwidth:
            return 3;
        case Op.OpDPdxFine:
            return 3;
        case Op.OpDPdyFine:
            return 3;
        case Op.OpFwidthFine:
            return 3;
        case Op.OpDPdxCoarse:
            return 3;
        case Op.OpDPdyCoarse:
            return 3;
        case Op.OpFwidthCoarse:
            return 3;
        case Op.OpEmitVertex:
            return 0;
        case Op.OpEndPrimitive:
            return 0;
        case Op.OpEmitStreamVertex:
            return 1;
        case Op.OpEndStreamPrimitive:
            return 1;
        case Op.OpControlBarrier:
            return 3;
        case Op.OpMemoryBarrier:
            return 2;
        case Op.OpAtomicLoad:
            return 5;
        case Op.OpAtomicStore:
            return 4;
        case Op.OpAtomicExchange:
            return 6;
        case Op.OpAtomicCompareExchange:
            return 8;
        case Op.OpAtomicCompareExchangeWeak:
            return 8;
        case Op.OpAtomicIIncrement:
            return 5;
        case Op.OpAtomicIDecrement:
            return 5;
        case Op.OpAtomicIAdd:
            return 6;
        case Op.OpAtomicISub:
            return 6;
        case Op.OpAtomicSMin:
            return 6;
        case Op.OpAtomicUMin:
            return 6;
        case Op.OpAtomicSMax:
            return 6;
        case Op.OpAtomicUMax:
            return 6;
        case Op.OpAtomicAnd:
            return 6;
        case Op.OpAtomicOr:
            return 6;
        case Op.OpAtomicXor:
            return 6;
        case Op.OpPhi:
            return 65535;
        case Op.OpLoopMerge:
            return 3;
        case Op.OpSelectionMerge:
            return 2;
        case Op.OpLabel:
            return 1;
        case Op.OpBranch:
            return 1;
        case Op.OpBranchConditional:
            return 65535;
        case Op.OpSwitch:
            return 65535;
        case Op.OpKill:
            return 0;
        case Op.OpReturn:
            return 0;
        case Op.OpReturnValue:
            return 1;
        case Op.OpUnreachable:
            return 0;
        case Op.OpLifetimeStart:
            return 2;
        case Op.OpLifetimeStop:
            return 2;
        case Op.OpGroupAsyncCopy:
            return 8;
        case Op.OpGroupWaitEvents:
            return 3;
        case Op.OpGroupAll:
            return 4;
        case Op.OpGroupAny:
            return 4;
        case Op.OpGroupBroadcast:
            return 5;
        case Op.OpGroupIAdd:
            return 5;
        case Op.OpGroupFAdd:
            return 5;
        case Op.OpGroupFMin:
            return 5;
        case Op.OpGroupUMin:
            return 5;
        case Op.OpGroupSMin:
            return 5;
        case Op.OpGroupFMax:
            return 5;
        case Op.OpGroupUMax:
            return 5;
        case Op.OpGroupSMax:
            return 5;
        case Op.OpReadPipe:
            return 6;
        case Op.OpWritePipe:
            return 6;
        case Op.OpReservedReadPipe:
            return 8;
        case Op.OpReservedWritePipe:
            return 8;
        case Op.OpReserveReadPipePackets:
            return 6;
        case Op.OpReserveWritePipePackets:
            return 6;
        case Op.OpCommitReadPipe:
            return 4;
        case Op.OpCommitWritePipe:
            return 4;
        case Op.OpIsValidReserveId:
            return 3;
        case Op.OpGetNumPipePackets:
            return 5;
        case Op.OpGetMaxPipePackets:
            return 5;
        case Op.OpGroupReserveReadPipePackets:
            return 7;
        case Op.OpGroupReserveWritePipePackets:
            return 7;
        case Op.OpGroupCommitReadPipe:
            return 5;
        case Op.OpGroupCommitWritePipe:
            return 5;
        case Op.OpEnqueueMarker:
            return 6;
        case Op.OpEnqueueKernel:
            return 65535;
        case Op.OpGetKernelNDrangeSubGroupCount:
            return 7;
        case Op.OpGetKernelNDrangeMaxSubGroupSize:
            return 7;
        case Op.OpGetKernelWorkGroupSize:
            return 6;
        case Op.OpGetKernelPreferredWorkGroupSizeMultiple:
            return 6;
        case Op.OpRetainEvent:
            return 1;
        case Op.OpReleaseEvent:
            return 1;
        case Op.OpCreateUserEvent:
            return 2;
        case Op.OpIsValidEvent:
            return 3;
        case Op.OpSetUserEventStatus:
            return 2;
        case Op.OpCaptureEventProfilingInfo:
            return 3;
        case Op.OpGetDefaultQueue:
            return 2;
        case Op.OpBuildNDRange:
            return 5;
        case Op.OpImageSparseSampleImplicitLod:
            return 5;
        case Op.OpImageSparseSampleExplicitLod:
            return 5;
        case Op.OpImageSparseSampleDrefImplicitLod:
            return 6;
        case Op.OpImageSparseSampleDrefExplicitLod:
            return 6;
        case Op.OpImageSparseSampleProjImplicitLod:
            return 5;
        case Op.OpImageSparseSampleProjExplicitLod:
            return 5;
        case Op.OpImageSparseSampleProjDrefImplicitLod:
            return 6;
        case Op.OpImageSparseSampleProjDrefExplicitLod:
            return 6;
        case Op.OpImageSparseFetch:
            return 5;
        case Op.OpImageSparseGather:
            return 6;
        case Op.OpImageSparseDrefGather:
            return 6;
        case Op.OpImageSparseTexelsResident:
            return 3;
        case Op.OpNoLine:
            return 0;
        case Op.OpAtomicFlagTestAndSet:
            return 5;
        case Op.OpAtomicFlagClear:
            return 3;
        case Op.OpImageSparseRead:
            return 5;
        case Op.OpSizeOf:
            return 3;
        case Op.OpTypePipeStorage:
            return 1;
        case Op.OpConstantPipeStorage:
            return 5;
        case Op.OpCreatePipeFromPipeStorage:
            return 3;
        case Op.OpGetKernelLocalSizeForSubgroupCount:
            return 7;
        case Op.OpGetKernelMaxNumSubgroups:
            return 6;
        case Op.OpTypeNamedBarrier:
            return 1;
        case Op.OpNamedBarrierInitialize:
            return 3;
        case Op.OpMemoryNamedBarrier:
            return 3;
        case Op.OpModuleProcessed:
            return 65535;
        case Op.OpExecutionModeId:
            return 2;
        case Op.OpDecorateId:
            return 65535;
        case Op.OpGroupNonUniformElect:
            return 3;
        case Op.OpGroupNonUniformAll:
            return 4;
        case Op.OpGroupNonUniformAny:
            return 4;
        case Op.OpGroupNonUniformAllEqual:
            return 4;
        case Op.OpGroupNonUniformBroadcast:
            return 5;
        case Op.OpGroupNonUniformBroadcastFirst:
            return 4;
        case Op.OpGroupNonUniformBallot:
            return 4;
        case Op.OpGroupNonUniformInverseBallot:
            return 4;
        case Op.OpGroupNonUniformBallotBitExtract:
            return 5;
        case Op.OpGroupNonUniformBallotBitCount:
            return 5;
        case Op.OpGroupNonUniformBallotFindLSB:
            return 4;
        case Op.OpGroupNonUniformBallotFindMSB:
            return 4;
        case Op.OpGroupNonUniformShuffle:
            return 5;
        case Op.OpGroupNonUniformShuffleXor:
            return 5;
        case Op.OpGroupNonUniformShuffleUp:
            return 5;
        case Op.OpGroupNonUniformShuffleDown:
            return 5;
        case Op.OpGroupNonUniformIAdd:
            return 6;
        case Op.OpGroupNonUniformFAdd:
            return 6;
        case Op.OpGroupNonUniformIMul:
            return 6;
        case Op.OpGroupNonUniformFMul:
            return 6;
        case Op.OpGroupNonUniformSMin:
            return 6;
        case Op.OpGroupNonUniformUMin:
            return 6;
        case Op.OpGroupNonUniformFMin:
            return 6;
        case Op.OpGroupNonUniformSMax:
            return 6;
        case Op.OpGroupNonUniformUMax:
            return 6;
        case Op.OpGroupNonUniformFMax:
            return 6;
        case Op.OpGroupNonUniformBitwiseAnd:
            return 6;
        case Op.OpGroupNonUniformBitwiseOr:
            return 6;
        case Op.OpGroupNonUniformBitwiseXor:
            return 6;
        case Op.OpGroupNonUniformLogicalAnd:
            return 6;
        case Op.OpGroupNonUniformLogicalOr:
            return 6;
        case Op.OpGroupNonUniformLogicalXor:
            return 6;
        case Op.OpGroupNonUniformQuadBroadcast:
            return 5;
        case Op.OpGroupNonUniformQuadSwap:
            return 5;
        case Op.OpCopyLogical:
            return 3;
        case Op.OpPtrEqual:
            return 4;
        case Op.OpPtrNotEqual:
            return 4;
        case Op.OpPtrDiff:
            return 4;
        case Op.OpColorAttachmentReadEXT:
            return 4;
        case Op.OpDepthAttachmentReadEXT:
            return 3;
        case Op.OpStencilAttachmentReadEXT:
            return 3;
        case Op.OpTerminateInvocation:
            return 0;
        case Op.OpTypeUntypedPointerKHR:
            return 2;
        case Op.OpUntypedVariableKHR:
            return 5;
        case Op.OpUntypedAccessChainKHR:
            return 65535;
        case Op.OpUntypedInBoundsAccessChainKHR:
            return 65535;
        case Op.OpSubgroupBallotKHR:
            return 3;
        case Op.OpSubgroupFirstInvocationKHR:
            return 3;
        case Op.OpUntypedPtrAccessChainKHR:
            return 65535;
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
            return 65535;
        case Op.OpUntypedArrayLengthKHR:
            return 5;
        case Op.OpUntypedPrefetchKHR:
            return 5;
        case Op.OpSubgroupAllKHR:
            return 3;
        case Op.OpSubgroupAnyKHR:
            return 3;
        case Op.OpSubgroupAllEqualKHR:
            return 3;
        case Op.OpGroupNonUniformRotateKHR:
            return 6;
        case Op.OpSubgroupReadInvocationKHR:
            return 4;
        case Op.OpExtInstWithForwardRefsKHR:
            return 65535;
        case Op.OpTraceRayKHR:
            return 11;
        case Op.OpExecuteCallableKHR:
            return 2;
        case Op.OpConvertUToAccelerationStructureKHR:
            return 3;
        case Op.OpIgnoreIntersectionKHR:
            return 0;
        case Op.OpTerminateRayKHR:
            return 0;
        case Op.OpSDot:
            return 5;
        case Op.OpUDot:
            return 5;
        case Op.OpSUDot:
            return 5;
        case Op.OpSDotAccSat:
            return 6;
        case Op.OpUDotAccSat:
            return 6;
        case Op.OpSUDotAccSat:
            return 6;
        case Op.OpTypeCooperativeMatrixKHR:
            return 6;
        case Op.OpCooperativeMatrixLoadKHR:
            return 6;
        case Op.OpCooperativeMatrixStoreKHR:
            return 5;
        case Op.OpCooperativeMatrixMulAddKHR:
            return 6;
        case Op.OpCooperativeMatrixLengthKHR:
            return 3;
        case Op.OpConstantCompositeReplicateEXT:
            return 3;
        case Op.OpSpecConstantCompositeReplicateEXT:
            return 3;
        case Op.OpCompositeConstructReplicateEXT:
            return 3;
        case Op.OpTypeRayQueryKHR:
            return 1;
        case Op.OpRayQueryInitializeKHR:
            return 8;
        case Op.OpRayQueryTerminateKHR:
            return 1;
        case Op.OpRayQueryGenerateIntersectionKHR:
            return 2;
        case Op.OpRayQueryConfirmIntersectionKHR:
            return 1;
        case Op.OpRayQueryProceedKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionTypeKHR:
            return 4;
        case Op.OpImageSampleWeightedQCOM:
            return 5;
        case Op.OpImageBoxFilterQCOM:
            return 5;
        case Op.OpImageBlockMatchSSDQCOM:
            return 7;
        case Op.OpImageBlockMatchSADQCOM:
            return 7;
        case Op.OpImageBlockMatchWindowSSDQCOM:
            return 7;
        case Op.OpImageBlockMatchWindowSADQCOM:
            return 7;
        case Op.OpImageBlockMatchGatherSSDQCOM:
            return 7;
        case Op.OpImageBlockMatchGatherSADQCOM:
            return 7;
        case Op.OpGroupIAddNonUniformAMD:
            return 5;
        case Op.OpGroupFAddNonUniformAMD:
            return 5;
        case Op.OpGroupFMinNonUniformAMD:
            return 5;
        case Op.OpGroupUMinNonUniformAMD:
            return 5;
        case Op.OpGroupSMinNonUniformAMD:
            return 5;
        case Op.OpGroupFMaxNonUniformAMD:
            return 5;
        case Op.OpGroupUMaxNonUniformAMD:
            return 5;
        case Op.OpGroupSMaxNonUniformAMD:
            return 5;
        case Op.OpFragmentMaskFetchAMD:
            return 4;
        case Op.OpFragmentFetchAMD:
            return 5;
        case Op.OpReadClockKHR:
            return 3;
        case Op.OpFinalizeNodePayloadsAMDX:
            return 1;
        case Op.OpFinishWritingNodePayloadAMDX:
            return 3;
        case Op.OpInitializeNodePayloadsAMDX:
            return 4;
        case Op.OpGroupNonUniformQuadAllKHR:
            return 3;
        case Op.OpGroupNonUniformQuadAnyKHR:
            return 3;
        case Op.OpHitObjectRecordHitMotionNV:
            return 14;
        case Op.OpHitObjectRecordHitWithIndexMotionNV:
            return 13;
        case Op.OpHitObjectRecordMissMotionNV:
            return 7;
        case Op.OpHitObjectGetWorldToObjectNV:
            return 3;
        case Op.OpHitObjectGetObjectToWorldNV:
            return 3;
        case Op.OpHitObjectGetObjectRayDirectionNV:
            return 3;
        case Op.OpHitObjectGetObjectRayOriginNV:
            return 3;
        case Op.OpHitObjectTraceRayMotionNV:
            return 13;
        case Op.OpHitObjectGetShaderRecordBufferHandleNV:
            return 3;
        case Op.OpHitObjectGetShaderBindingTableRecordIndexNV:
            return 3;
        case Op.OpHitObjectRecordEmptyNV:
            return 1;
        case Op.OpHitObjectTraceRayNV:
            return 12;
        case Op.OpHitObjectRecordHitNV:
            return 13;
        case Op.OpHitObjectRecordHitWithIndexNV:
            return 12;
        case Op.OpHitObjectRecordMissNV:
            return 6;
        case Op.OpHitObjectExecuteShaderNV:
            return 2;
        case Op.OpHitObjectGetCurrentTimeNV:
            return 3;
        case Op.OpHitObjectGetAttributesNV:
            return 2;
        case Op.OpHitObjectGetHitKindNV:
            return 3;
        case Op.OpHitObjectGetPrimitiveIndexNV:
            return 3;
        case Op.OpHitObjectGetGeometryIndexNV:
            return 3;
        case Op.OpHitObjectGetInstanceIdNV:
            return 3;
        case Op.OpHitObjectGetInstanceCustomIndexNV:
            return 3;
        case Op.OpHitObjectGetWorldRayDirectionNV:
            return 3;
        case Op.OpHitObjectGetWorldRayOriginNV:
            return 3;
        case Op.OpHitObjectGetRayTMaxNV:
            return 3;
        case Op.OpHitObjectGetRayTMinNV:
            return 3;
        case Op.OpHitObjectIsEmptyNV:
            return 3;
        case Op.OpHitObjectIsHitNV:
            return 3;
        case Op.OpHitObjectIsMissNV:
            return 3;
        case Op.OpReorderThreadWithHitObjectNV:
            return 3;
        case Op.OpReorderThreadWithHintNV:
            return 2;
        case Op.OpTypeHitObjectNV:
            return 1;
        case Op.OpImageSampleFootprintNV:
            return 7;
        case Op.OpEmitMeshTasksEXT:
            return 4;
        case Op.OpSetMeshOutputsEXT:
            return 2;
        case Op.OpGroupNonUniformPartitionNV:
            return 3;
        case Op.OpWritePackedPrimitiveIndices4x8NV:
            return 2;
        case Op.OpFetchMicroTriangleVertexPositionNV:
            return 7;
        case Op.OpFetchMicroTriangleVertexBarycentricNV:
            return 7;
        case Op.OpReportIntersectionKHR:
            return 4;
        case Op.OpIgnoreIntersectionNV:
            return 0;
        case Op.OpTerminateRayNV:
            return 0;
        case Op.OpTraceNV:
            return 11;
        case Op.OpTraceMotionNV:
            return 12;
        case Op.OpTraceRayMotionNV:
            return 12;
        case Op.OpRayQueryGetIntersectionTriangleVertexPositionsKHR:
            return 4;
        case Op.OpTypeAccelerationStructureKHR:
            return 1;
        case Op.OpExecuteCallableNV:
            return 2;
        case Op.OpTypeCooperativeMatrixNV:
            return 5;
        case Op.OpCooperativeMatrixLoadNV:
            return 6;
        case Op.OpCooperativeMatrixStoreNV:
            return 5;
        case Op.OpCooperativeMatrixMulAddNV:
            return 5;
        case Op.OpCooperativeMatrixLengthNV:
            return 3;
        case Op.OpBeginInvocationInterlockEXT:
            return 0;
        case Op.OpEndInvocationInterlockEXT:
            return 0;
        case Op.OpDemoteToHelperInvocation:
            return 0;
        case Op.OpIsHelperInvocationEXT:
            return 2;
        case Op.OpConvertUToImageNV:
            return 3;
        case Op.OpConvertUToSamplerNV:
            return 3;
        case Op.OpConvertImageToUNV:
            return 3;
        case Op.OpConvertSamplerToUNV:
            return 3;
        case Op.OpConvertUToSampledImageNV:
            return 3;
        case Op.OpConvertSampledImageToUNV:
            return 3;
        case Op.OpSamplerImageAddressingModeNV:
            return 1;
        case Op.OpRawAccessChainNV:
            return 7;
        case Op.OpSubgroupShuffleINTEL:
            return 4;
        case Op.OpSubgroupShuffleDownINTEL:
            return 5;
        case Op.OpSubgroupShuffleUpINTEL:
            return 5;
        case Op.OpSubgroupShuffleXorINTEL:
            return 4;
        case Op.OpSubgroupBlockReadINTEL:
            return 3;
        case Op.OpSubgroupBlockWriteINTEL:
            return 2;
        case Op.OpSubgroupImageBlockReadINTEL:
            return 4;
        case Op.OpSubgroupImageBlockWriteINTEL:
            return 3;
        case Op.OpSubgroupImageMediaBlockReadINTEL:
            return 6;
        case Op.OpSubgroupImageMediaBlockWriteINTEL:
            return 5;
        case Op.OpUCountLeadingZerosINTEL:
            return 3;
        case Op.OpUCountTrailingZerosINTEL:
            return 3;
        case Op.OpAbsISubINTEL:
            return 4;
        case Op.OpAbsUSubINTEL:
            return 4;
        case Op.OpIAddSatINTEL:
            return 4;
        case Op.OpUAddSatINTEL:
            return 4;
        case Op.OpIAverageINTEL:
            return 4;
        case Op.OpUAverageINTEL:
            return 4;
        case Op.OpIAverageRoundedINTEL:
            return 4;
        case Op.OpUAverageRoundedINTEL:
            return 4;
        case Op.OpISubSatINTEL:
            return 4;
        case Op.OpUSubSatINTEL:
            return 4;
        case Op.OpIMul32x16INTEL:
            return 4;
        case Op.OpUMul32x16INTEL:
            return 4;
        case Op.OpConstantFunctionPointerINTEL:
            return 3;
        case Op.OpFunctionPointerCallINTEL:
            return 65535;
        case Op.OpAsmTargetINTEL:
            return 65535;
        case Op.OpAsmINTEL:
            return 65535;
        case Op.OpAsmCallINTEL:
            return 65535;
        case Op.OpAtomicFMinEXT:
            return 6;
        case Op.OpAtomicFMaxEXT:
            return 6;
        case Op.OpAssumeTrueKHR:
            return 1;
        case Op.OpExpectKHR:
            return 4;
        case Op.OpDecorateString:
            return 65535;
        case Op.OpMemberDecorateString:
            return 65535;
        case Op.OpVmeImageINTEL:
            return 4;
        case Op.OpTypeVmeImageINTEL:
            return 2;
        case Op.OpTypeAvcImePayloadINTEL:
            return 1;
        case Op.OpTypeAvcRefPayloadINTEL:
            return 1;
        case Op.OpTypeAvcSicPayloadINTEL:
            return 1;
        case Op.OpTypeAvcMcePayloadINTEL:
            return 1;
        case Op.OpTypeAvcMceResultINTEL:
            return 1;
        case Op.OpTypeAvcImeResultINTEL:
            return 1;
        case Op.OpTypeAvcImeResultSingleReferenceStreamoutINTEL:
            return 1;
        case Op.OpTypeAvcImeResultDualReferenceStreamoutINTEL:
            return 1;
        case Op.OpTypeAvcImeSingleReferenceStreaminINTEL:
            return 1;
        case Op.OpTypeAvcImeDualReferenceStreaminINTEL:
            return 1;
        case Op.OpTypeAvcRefResultINTEL:
            return 1;
        case Op.OpTypeAvcSicResultINTEL:
            return 1;
        case Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL:
            return 2;
        case Op.OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL:
            return 2;
        case Op.OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL:
            return 2;
        case Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
            return 6;
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL:
            return 2;
        case Op.OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL:
            return 2;
        case Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL:
            return 3;
        case Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
            return 4;
        case Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
            return 5;
        case Op.OpSubgroupAvcMceConvertToImePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToImeResultINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToRefPayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToRefResultINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToSicPayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcMceConvertToSicResultINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetMotionVectorsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterDistortionsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterMajorShapeINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterMinorShapeINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterDirectionsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL:
            return 3;
        case Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
            return 5;
        case Op.OpSubgroupAvcImeInitializeINTEL:
            return 5;
        case Op.OpSubgroupAvcImeSetSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcImeSetDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcImeRefWindowSizeINTEL:
            return 4;
        case Op.OpSubgroupAvcImeAdjustRefOffsetINTEL:
            return 6;
        case Op.OpSubgroupAvcImeConvertToMcePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
            return 4;
        case Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
            return 3;
        case Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
            return 4;
        case Op.OpSubgroupAvcImeSetWeightedSadINTEL:
            return 4;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
            return 7;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
            return 5;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
            return 6;
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
            return 7;
        case Op.OpSubgroupAvcImeConvertToMceResultINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL:
            return 3;
        case Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
            return 3;
        case Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
            return 5;
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
            return 5;
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
            return 5;
        case Op.OpSubgroupAvcImeGetBorderReachedINTEL:
            return 4;
        case Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
            return 3;
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
            return 3;
        case Op.OpSubgroupAvcFmeInitializeINTEL:
            return 9;
        case Op.OpSubgroupAvcBmeInitializeINTEL:
            return 10;
        case Op.OpSubgroupAvcRefConvertToMcePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
            return 3;
        case Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL:
            return 3;
        case Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
            return 6;
        case Op.OpSubgroupAvcRefConvertToMceResultINTEL:
            return 3;
        case Op.OpSubgroupAvcSicInitializeINTEL:
            return 3;
        case Op.OpSubgroupAvcSicConfigureSkcINTEL:
            return 8;
        case Op.OpSubgroupAvcSicConfigureIpeLumaINTEL:
            return 10;
        case Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
            return 13;
        case Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL:
            return 4;
        case Op.OpSubgroupAvcSicConvertToMcePayloadINTEL:
            return 3;
        case Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
            return 4;
        case Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
            return 6;
        case Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
            return 4;
        case Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL:
            return 3;
        case Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
            return 4;
        case Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
            return 4;
        case Op.OpSubgroupAvcSicEvaluateIpeINTEL:
            return 4;
        case Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
            return 6;
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
            return 5;
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
            return 6;
        case Op.OpSubgroupAvcSicConvertToMceResultINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetIpeChromaModeINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
            return 3;
        case Op.OpSubgroupAvcSicGetInterRawSadsINTEL:
            return 3;
        case Op.OpVariableLengthArrayINTEL:
            return 3;
        case Op.OpSaveMemoryINTEL:
            return 2;
        case Op.OpRestoreMemoryINTEL:
            return 1;
        case Op.OpArbitraryFloatSinCosPiINTEL:
            return 9;
        case Op.OpArbitraryFloatCastINTEL:
            return 8;
        case Op.OpArbitraryFloatCastFromIntINTEL:
            return 8;
        case Op.OpArbitraryFloatCastToIntINTEL:
            return 7;
        case Op.OpArbitraryFloatAddINTEL:
            return 10;
        case Op.OpArbitraryFloatSubINTEL:
            return 10;
        case Op.OpArbitraryFloatMulINTEL:
            return 10;
        case Op.OpArbitraryFloatDivINTEL:
            return 10;
        case Op.OpArbitraryFloatGTINTEL:
            return 6;
        case Op.OpArbitraryFloatGEINTEL:
            return 6;
        case Op.OpArbitraryFloatLTINTEL:
            return 6;
        case Op.OpArbitraryFloatLEINTEL:
            return 6;
        case Op.OpArbitraryFloatEQINTEL:
            return 6;
        case Op.OpArbitraryFloatRecipINTEL:
            return 8;
        case Op.OpArbitraryFloatRSqrtINTEL:
            return 8;
        case Op.OpArbitraryFloatCbrtINTEL:
            return 8;
        case Op.OpArbitraryFloatHypotINTEL:
            return 10;
        case Op.OpArbitraryFloatSqrtINTEL:
            return 8;
        case Op.OpArbitraryFloatLogINTEL:
            return 8;
        case Op.OpArbitraryFloatLog2INTEL:
            return 8;
        case Op.OpArbitraryFloatLog10INTEL:
            return 8;
        case Op.OpArbitraryFloatLog1pINTEL:
            return 8;
        case Op.OpArbitraryFloatExpINTEL:
            return 8;
        case Op.OpArbitraryFloatExp2INTEL:
            return 8;
        case Op.OpArbitraryFloatExp10INTEL:
            return 8;
        case Op.OpArbitraryFloatExpm1INTEL:
            return 8;
        case Op.OpArbitraryFloatSinINTEL:
            return 8;
        case Op.OpArbitraryFloatCosINTEL:
            return 8;
        case Op.OpArbitraryFloatSinCosINTEL:
            return 8;
        case Op.OpArbitraryFloatSinPiINTEL:
            return 8;
        case Op.OpArbitraryFloatCosPiINTEL:
            return 8;
        case Op.OpArbitraryFloatASinINTEL:
            return 8;
        case Op.OpArbitraryFloatASinPiINTEL:
            return 8;
        case Op.OpArbitraryFloatACosINTEL:
            return 8;
        case Op.OpArbitraryFloatACosPiINTEL:
            return 8;
        case Op.OpArbitraryFloatATanINTEL:
            return 8;
        case Op.OpArbitraryFloatATanPiINTEL:
            return 8;
        case Op.OpArbitraryFloatATan2INTEL:
            return 10;
        case Op.OpArbitraryFloatPowINTEL:
            return 10;
        case Op.OpArbitraryFloatPowRINTEL:
            return 10;
        case Op.OpArbitraryFloatPowNINTEL:
            return 9;
        case Op.OpLoopControlINTEL:
            return 65535;
        case Op.OpAliasDomainDeclINTEL:
            return 2;
        case Op.OpAliasScopeDeclINTEL:
            return 3;
        case Op.OpAliasScopeListDeclINTEL:
            return 65535;
        case Op.OpFixedSqrtINTEL:
            return 9;
        case Op.OpFixedRecipINTEL:
            return 9;
        case Op.OpFixedRsqrtINTEL:
            return 9;
        case Op.OpFixedSinINTEL:
            return 9;
        case Op.OpFixedCosINTEL:
            return 9;
        case Op.OpFixedSinCosINTEL:
            return 9;
        case Op.OpFixedSinPiINTEL:
            return 9;
        case Op.OpFixedCosPiINTEL:
            return 9;
        case Op.OpFixedSinCosPiINTEL:
            return 9;
        case Op.OpFixedLogINTEL:
            return 9;
        case Op.OpFixedExpINTEL:
            return 9;
        case Op.OpPtrCastToCrossWorkgroupINTEL:
            return 3;
        case Op.OpCrossWorkgroupCastToPtrINTEL:
            return 3;
        case Op.OpReadPipeBlockingINTEL:
            return 4;
        case Op.OpWritePipeBlockingINTEL:
            return 4;
        case Op.OpFPGARegINTEL:
            return 4;
        case Op.OpRayQueryGetRayTMinKHR:
            return 3;
        case Op.OpRayQueryGetRayFlagsKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionTKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionInstanceIdKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionGeometryIndexKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionPrimitiveIndexKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionBarycentricsKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionFrontFaceKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionObjectRayDirectionKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionObjectRayOriginKHR:
            return 4;
        case Op.OpRayQueryGetWorldRayDirectionKHR:
            return 3;
        case Op.OpRayQueryGetWorldRayOriginKHR:
            return 3;
        case Op.OpRayQueryGetIntersectionObjectToWorldKHR:
            return 4;
        case Op.OpRayQueryGetIntersectionWorldToObjectKHR:
            return 4;
        case Op.OpAtomicFAddEXT:
            return 6;
        case Op.OpTypeBufferSurfaceINTEL:
            return 2;
        case Op.OpTypeStructContinuedINTEL:
            return 65535;
        case Op.OpConstantCompositeContinuedINTEL:
            return 65535;
        case Op.OpSpecConstantCompositeContinuedINTEL:
            return 65535;
        case Op.OpCompositeConstructContinuedINTEL:
            return 65535;
        case Op.OpConvertFToBF16INTEL:
            return 3;
        case Op.OpConvertBF16ToFINTEL:
            return 3;
        case Op.OpControlBarrierArriveINTEL:
            return 3;
        case Op.OpControlBarrierWaitINTEL:
            return 3;
        case Op.OpSubgroupBlockPrefetchINTEL:
            return 3;
        case Op.OpGroupIMulKHR:
            return 5;
        case Op.OpGroupFMulKHR:
            return 5;
        case Op.OpGroupBitwiseAndKHR:
            return 5;
        case Op.OpGroupBitwiseOrKHR:
            return 5;
        case Op.OpGroupBitwiseXorKHR:
            return 5;
        case Op.OpGroupLogicalAndKHR:
            return 5;
        case Op.OpGroupLogicalOrKHR:
            return 5;
        case Op.OpGroupLogicalXorKHR:
            return 5;
        case Op.OpMaskedGatherINTEL:
            return 6;
        case Op.OpMaskedScatterINTEL:
            return 4;
    }
}

/**
    Gets the indices for reference IDs for [Op]
*/
vector!uint getIDRefIndices(Op code) @nogc {
    switch (code) {
        default:
            return vector!(uint).init;
        
        case Op.OpName:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpMemberName:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpLine:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpExtInst:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpEntryPoint:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpExecutionMode:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpTypeVector:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpTypeMatrix:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpTypeImage:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpTypeSampledImage:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpTypeArray:
            uint[2] tmp = [1, 2];
            return vector!uint(tmp);
        case Op.OpTypeRuntimeArray:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpTypePointer:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpTypeFunction:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpTypeForwardPointer:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpFunction:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpFunctionCall:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpImageTexelPointer:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpLoad:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpStore:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpCopyMemory:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpCopyMemorySized:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpAccessChain:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpInBoundsAccessChain:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpPtrAccessChain:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpArrayLength:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGenericPtrMemSemantics:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpInBoundsPtrAccessChain:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpDecorate:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpMemberDecorate:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpGroupDecorate:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpGroupMemberDecorate:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpVectorExtractDynamic:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpVectorInsertDynamic:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpVectorShuffle:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpCompositeExtract:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpCompositeInsert:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpCopyObject:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpTranspose:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSampledImage:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSampleImplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSampleExplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSampleDrefImplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSampleDrefExplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSampleProjImplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSampleProjExplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSampleProjDrefImplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSampleProjDrefExplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageFetch:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageGather:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageDrefGather:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageRead:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageWrite:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpImage:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpImageQueryFormat:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpImageQueryOrder:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpImageQuerySizeLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageQuerySize:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpImageQueryLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageQueryLevels:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpImageQuerySamples:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertFToU:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertFToS:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertSToF:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertUToF:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpUConvert:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSConvert:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpFConvert:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpQuantizeToF16:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertPtrToU:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSatConvertSToU:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSatConvertUToS:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertUToPtr:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpPtrCastToGeneric:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGenericCastToPtr:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGenericCastToPtrExplicit:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpBitcast:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSNegate:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpFNegate:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpIAdd:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFAdd:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpISub:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFSub:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpIMul:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFMul:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUDiv:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSDiv:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFDiv:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUMod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSRem:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSMod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFRem:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFMod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpVectorTimesScalar:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpMatrixTimesScalar:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpVectorTimesMatrix:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpMatrixTimesVector:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpMatrixTimesMatrix:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpOuterProduct:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpDot:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpIAddCarry:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpISubBorrow:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUMulExtended:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSMulExtended:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpAny:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAll:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpIsNan:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpIsInf:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpIsFinite:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpIsNormal:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSignBitSet:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpLessOrGreater:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpOrdered:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUnordered:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpLogicalEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpLogicalNotEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpLogicalOr:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpLogicalAnd:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpLogicalNot:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSelect:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpIEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpINotEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUGreaterThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSGreaterThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUGreaterThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSGreaterThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpULessThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSLessThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpULessThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSLessThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFOrdEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFUnordEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFOrdNotEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFUnordNotEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFOrdLessThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFUnordLessThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFOrdGreaterThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFUnordGreaterThan:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFOrdLessThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFUnordLessThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFOrdGreaterThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFUnordGreaterThanEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpShiftRightLogical:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpShiftRightArithmetic:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpShiftLeftLogical:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpBitwiseOr:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpBitwiseXor:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpBitwiseAnd:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpNot:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpBitFieldInsert:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpBitFieldSExtract:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpBitFieldUExtract:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpBitReverse:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpBitCount:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpDPdx:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpDPdy:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpFwidth:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpDPdxFine:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpDPdyFine:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpFwidthFine:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpDPdxCoarse:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpDPdyCoarse:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpFwidthCoarse:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpEmitStreamVertex:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpEndStreamPrimitive:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpAtomicLoad:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAtomicStore:
            uint[2] tmp = [0, 3];
            return vector!uint(tmp);
        case Op.OpAtomicExchange:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicCompareExchange:
            uint[3] tmp = [2, 6, 7];
            return vector!uint(tmp);
        case Op.OpAtomicCompareExchangeWeak:
            uint[3] tmp = [2, 6, 7];
            return vector!uint(tmp);
        case Op.OpAtomicIIncrement:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAtomicIDecrement:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAtomicIAdd:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicISub:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicSMin:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicUMin:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicSMax:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicUMax:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicAnd:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicOr:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicXor:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpLoopMerge:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpSelectionMerge:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpBranch:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpBranchConditional:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpSwitch:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpReturnValue:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpLifetimeStart:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpLifetimeStop:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpGroupAsyncCopy:
            uint[5] tmp = [3, 4, 5, 6, 7];
            return vector!uint(tmp);
        case Op.OpGroupWaitEvents:
            uint[2] tmp = [1, 2];
            return vector!uint(tmp);
        case Op.OpGroupAll:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupAny:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupBroadcast:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupIAdd:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFAdd:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFMin:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupUMin:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupSMin:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFMax:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupUMax:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupSMax:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpReadPipe:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpWritePipe:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpReservedReadPipe:
            uint[6] tmp = [2, 3, 4, 5, 6, 7];
            return vector!uint(tmp);
        case Op.OpReservedWritePipe:
            uint[6] tmp = [2, 3, 4, 5, 6, 7];
            return vector!uint(tmp);
        case Op.OpReserveReadPipePackets:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpReserveWritePipePackets:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpCommitReadPipe:
            uint[4] tmp = [0, 1, 2, 3];
            return vector!uint(tmp);
        case Op.OpCommitWritePipe:
            uint[4] tmp = [0, 1, 2, 3];
            return vector!uint(tmp);
        case Op.OpIsValidReserveId:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGetNumPipePackets:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpGetMaxPipePackets:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpGroupReserveReadPipePackets:
            uint[4] tmp = [3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpGroupReserveWritePipePackets:
            uint[4] tmp = [3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpGroupCommitReadPipe:
            uint[4] tmp = [1, 2, 3, 4];
            return vector!uint(tmp);
        case Op.OpGroupCommitWritePipe:
            uint[4] tmp = [1, 2, 3, 4];
            return vector!uint(tmp);
        case Op.OpEnqueueMarker:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpEnqueueKernel:
            uint[10] tmp = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            return vector!uint(tmp);
        case Op.OpGetKernelNDrangeSubGroupCount:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpGetKernelNDrangeMaxSubGroupSize:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpGetKernelWorkGroupSize:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpGetKernelPreferredWorkGroupSizeMultiple:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpRetainEvent:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpReleaseEvent:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpIsValidEvent:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSetUserEventStatus:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpCaptureEventProfilingInfo:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpBuildNDRange:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleImplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleExplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleDrefImplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleDrefExplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleProjImplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleProjExplicitLod:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleProjDrefImplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseSampleProjDrefExplicitLod:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseFetch:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSparseGather:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseDrefGather:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageSparseTexelsResident:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAtomicFlagTestAndSet:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAtomicFlagClear:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpImageSparseRead:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSizeOf:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpCreatePipeFromPipeStorage:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGetKernelLocalSizeForSubgroupCount:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpGetKernelMaxNumSubgroups:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpNamedBarrierInitialize:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpMemoryNamedBarrier:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpExecutionModeId:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpDecorateId:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformAll:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformAny:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformAllEqual:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBroadcast:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBroadcastFirst:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBallot:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformInverseBallot:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBallotBitExtract:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBallotBitCount:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBallotFindLSB:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBallotFindMSB:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformShuffle:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformShuffleXor:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformShuffleUp:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformShuffleDown:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformIAdd:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFAdd:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformIMul:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFMul:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformSMin:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformUMin:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFMin:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformSMax:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformUMax:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFMax:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBitwiseAnd:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBitwiseOr:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBitwiseXor:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformLogicalAnd:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformLogicalOr:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformLogicalXor:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformQuadBroadcast:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformQuadSwap:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpCopyLogical:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpPtrEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpPtrNotEqual:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpPtrDiff:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpColorAttachmentReadEXT:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpUntypedAccessChainKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUntypedInBoundsAccessChainKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupBallotKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupFirstInvocationKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpUntypedPtrAccessChainKHR:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpUntypedArrayLengthKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUntypedPrefetchKHR:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpSubgroupAllKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAnyKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAllEqualKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformRotateKHR:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupReadInvocationKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpExtInstWithForwardRefsKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpTraceRayKHR:
            uint[11] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
            return vector!uint(tmp);
        case Op.OpExecuteCallableKHR:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpConvertUToAccelerationStructureKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSDot:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUDot:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSUDot:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSDotAccSat:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpUDotAccSat:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSUDotAccSat:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpTypeCooperativeMatrixKHR:
            uint[4] tmp = [1, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixLoadKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixStoreKHR:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixMulAddKHR:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixLengthKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConstantCompositeReplicateEXT:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSpecConstantCompositeReplicateEXT:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpCompositeConstructReplicateEXT:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryInitializeKHR:
            uint[8] tmp = [0, 1, 2, 3, 4, 5, 6, 7];
            return vector!uint(tmp);
        case Op.OpRayQueryTerminateKHR:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpRayQueryGenerateIntersectionKHR:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpRayQueryConfirmIntersectionKHR:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpRayQueryProceedKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionTypeKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpImageSampleWeightedQCOM:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageBoxFilterQCOM:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpImageBlockMatchSSDQCOM:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpImageBlockMatchSADQCOM:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpImageBlockMatchWindowSSDQCOM:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpImageBlockMatchWindowSADQCOM:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpImageBlockMatchGatherSSDQCOM:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpImageBlockMatchGatherSADQCOM:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpGroupIAddNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFAddNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFMinNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupUMinNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupSMinNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFMaxNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupUMaxNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupSMaxNonUniformAMD:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpFragmentMaskFetchAMD:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFragmentFetchAMD:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpFinalizeNodePayloadsAMDX:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpFinishWritingNodePayloadAMDX:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpInitializeNodePayloadsAMDX:
            uint[3] tmp = [0, 2, 3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformQuadAllKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformQuadAnyKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordHitMotionNV:
            uint[14] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordHitWithIndexMotionNV:
            uint[13] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordMissMotionNV:
            uint[7] tmp = [0, 1, 2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpHitObjectGetWorldToObjectNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetObjectToWorldNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetObjectRayDirectionNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetObjectRayOriginNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectTraceRayMotionNV:
            uint[13] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            return vector!uint(tmp);
        case Op.OpHitObjectGetShaderRecordBufferHandleNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetShaderBindingTableRecordIndexNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordEmptyNV:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpHitObjectTraceRayNV:
            uint[12] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordHitNV:
            uint[13] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordHitWithIndexNV:
            uint[12] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            return vector!uint(tmp);
        case Op.OpHitObjectRecordMissNV:
            uint[6] tmp = [0, 1, 2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpHitObjectExecuteShaderNV:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpHitObjectGetCurrentTimeNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetAttributesNV:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpHitObjectGetHitKindNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetPrimitiveIndexNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetGeometryIndexNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetInstanceIdNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetInstanceCustomIndexNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetWorldRayDirectionNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetWorldRayOriginNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetRayTMaxNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectGetRayTMinNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectIsEmptyNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectIsHitNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpHitObjectIsMissNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpReorderThreadWithHitObjectNV:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpReorderThreadWithHintNV:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpImageSampleFootprintNV:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpEmitMeshTasksEXT:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpSetMeshOutputsEXT:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformPartitionNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpWritePackedPrimitiveIndices4x8NV:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpFetchMicroTriangleVertexPositionNV:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpFetchMicroTriangleVertexBarycentricNV:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpReportIntersectionKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpTraceNV:
            uint[11] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
            return vector!uint(tmp);
        case Op.OpTraceMotionNV:
            uint[12] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            return vector!uint(tmp);
        case Op.OpTraceRayMotionNV:
            uint[12] tmp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionTriangleVertexPositionsKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpExecuteCallableNV:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpTypeCooperativeMatrixNV:
            uint[3] tmp = [1, 3, 4];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixLoadNV:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixStoreNV:
            uint[4] tmp = [0, 1, 2, 3];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixMulAddNV:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixLengthNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertUToImageNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertUToSamplerNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertImageToUNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertSamplerToUNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertUToSampledImageNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertSampledImageToUNV:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRawAccessChainNV:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupShuffleINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupShuffleDownINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupShuffleUpINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupShuffleXorINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupBlockReadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupBlockWriteINTEL:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpSubgroupImageBlockReadINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupImageBlockWriteINTEL:
            uint[3] tmp = [0, 1, 2];
            return vector!uint(tmp);
        case Op.OpSubgroupImageMediaBlockReadINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupImageMediaBlockWriteINTEL:
            uint[5] tmp = [0, 1, 2, 3, 4];
            return vector!uint(tmp);
        case Op.OpUCountLeadingZerosINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpUCountTrailingZerosINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAbsISubINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpAbsUSubINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpIAddSatINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUAddSatINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpIAverageINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUAverageINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpIAverageRoundedINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUAverageRoundedINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpISubSatINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUSubSatINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpIMul32x16INTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpUMul32x16INTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpConstantFunctionPointerINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAsmINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpAsmCallINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpAtomicFMinEXT:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAtomicFMaxEXT:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpAssumeTrueKHR:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpExpectKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpDecorateString:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpMemberDecorateString:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpVmeImageINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpTypeVmeImageINTEL:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetInterShapePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetInterDirectionPenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetAcOnlyHaarINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceConvertToImePayloadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceConvertToImeResultINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceConvertToRefPayloadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceConvertToRefResultINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceConvertToSicPayloadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceConvertToSicResultINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetMotionVectorsINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterDistortionsINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetBestInterDistortionsINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterMajorShapeINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterMinorShapeINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterDirectionsINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterMotionVectorCountINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterReferenceIdsINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeInitializeINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeSetSingleReferenceINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeSetDualReferenceINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeRefWindowSizeINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeAdjustRefOffsetINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeConvertToMcePayloadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeSetMaxMotionVectorCountINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeSetWeightedSadINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL:
            uint[5] tmp = [2, 3, 4, 5, 6];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeConvertToMceResultINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetSingleReferenceStreaminINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetDualReferenceStreaminINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeStripDualReferenceStreamoutINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetBorderReachedINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcFmeInitializeINTEL:
            uint[7] tmp = [2, 3, 4, 5, 6, 7, 8];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcBmeInitializeINTEL:
            uint[8] tmp = [2, 3, 4, 5, 6, 7, 8, 9];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefConvertToMcePayloadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefSetBidirectionalMixDisableINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefSetBilinearFilterEnableINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefEvaluateWithDualReferenceINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcRefConvertToMceResultINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicInitializeINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicConfigureSkcINTEL:
            uint[6] tmp = [2, 3, 4, 5, 6, 7];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicConfigureIpeLumaINTEL:
            uint[8] tmp = [2, 3, 4, 5, 6, 7, 8, 9];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicConfigureIpeLumaChromaINTEL:
            uint[11] tmp = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetMotionVectorMaskINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicConvertToMcePayloadINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicSetBilinearFilterEnableINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicEvaluateIpeINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicEvaluateWithDualReferenceINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL:
            uint[4] tmp = [2, 3, 4, 5];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicConvertToMceResultINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetIpeLumaShapeINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetPackedIpeLumaModesINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetIpeChromaModeINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupAvcSicGetInterRawSadsINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpVariableLengthArrayINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRestoreMemoryINTEL:
            uint[1] tmp = [0];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatSinCosPiINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatCastINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatCastFromIntINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatCastToIntINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatAddINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatSubINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatMulINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatDivINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatGTINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatGEINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatLTINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatLEINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatEQINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatRecipINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatRSqrtINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatCbrtINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatHypotINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatSqrtINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatLogINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatLog2INTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatLog10INTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatLog1pINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatExpINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatExp2INTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatExp10INTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatExpm1INTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatSinINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatCosINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatSinCosINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatSinPiINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatCosPiINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatASinINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatASinPiINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatACosINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatACosPiINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatATanINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatATanPiINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatATan2INTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatPowINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatPowRINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpArbitraryFloatPowNINTEL:
            uint[2] tmp = [2, 4];
            return vector!uint(tmp);
        case Op.OpAliasScopeDeclINTEL:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpFixedSqrtINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedRecipINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedRsqrtINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedSinINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedCosINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedSinCosINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedSinPiINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedCosPiINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedSinCosPiINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedLogINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFixedExpINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpPtrCastToCrossWorkgroupINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpCrossWorkgroupCastToPtrINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpReadPipeBlockingINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpWritePipeBlockingINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpFPGARegINTEL:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetRayTMinKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryGetRayFlagsKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionTKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionInstanceCustomIndexKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionInstanceIdKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionGeometryIndexKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionPrimitiveIndexKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionBarycentricsKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionFrontFaceKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionCandidateAABBOpaqueKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionObjectRayDirectionKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionObjectRayOriginKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetWorldRayDirectionKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryGetWorldRayOriginKHR:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionObjectToWorldKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpRayQueryGetIntersectionWorldToObjectKHR:
            uint[2] tmp = [2, 3];
            return vector!uint(tmp);
        case Op.OpAtomicFAddEXT:
            uint[2] tmp = [2, 5];
            return vector!uint(tmp);
        case Op.OpConvertFToBF16INTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpConvertBF16ToFINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpSubgroupBlockPrefetchINTEL:
            uint[2] tmp = [0, 1];
            return vector!uint(tmp);
        case Op.OpGroupIMulKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupFMulKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupBitwiseAndKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupBitwiseOrKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupBitwiseXorKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupLogicalAndKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupLogicalOrKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpGroupLogicalXorKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpMaskedGatherINTEL:
            uint[3] tmp = [2, 4, 5];
            return vector!uint(tmp);
        case Op.OpMaskedScatterINTEL:
            uint[3] tmp = [0, 1, 3];
            return vector!uint(tmp);
    }
}

/**
    Gets the indices for reference IDs for [Op]
*/
vector!uint getOptionalIDRefIndices(Op code) @nogc {
    switch (code) {
        default:
            return vector!(uint).init;
        
        case Op.OpSource:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpVariable:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformIAdd:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFAdd:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformIMul:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFMul:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformSMin:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformUMin:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFMin:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformSMax:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformUMax:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformFMax:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBitwiseAnd:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBitwiseOr:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformBitwiseXor:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformLogicalAnd:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformLogicalOr:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformLogicalXor:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpColorAttachmentReadEXT:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpDepthAttachmentReadEXT:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpStencilAttachmentReadEXT:
            uint[1] tmp = [2];
            return vector!uint(tmp);
        case Op.OpUntypedVariableKHR:
            uint[2] tmp = [3, 4];
            return vector!uint(tmp);
        case Op.OpUntypedPrefetchKHR:
            uint[3] tmp = [2, 3, 4];
            return vector!uint(tmp);
        case Op.OpGroupNonUniformRotateKHR:
            uint[1] tmp = [5];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixLoadKHR:
            uint[1] tmp = [4];
            return vector!uint(tmp);
        case Op.OpCooperativeMatrixStoreKHR:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpReorderThreadWithHitObjectNV:
            uint[2] tmp = [1, 2];
            return vector!uint(tmp);
        case Op.OpEmitMeshTasksEXT:
            uint[1] tmp = [3];
            return vector!uint(tmp);
        case Op.OpAliasDomainDeclINTEL:
            uint[1] tmp = [1];
            return vector!uint(tmp);
        case Op.OpAliasScopeDeclINTEL:
            uint[1] tmp = [2];
            return vector!uint(tmp);
    }
}

/**
    Gets whether [Op] ends with a list of arbitrary id refs.
*/
bool getHasArbitraryRefIndices(Op code) @nogc {
    switch (code) {
        default:
            return false;
        
        case Op.OpExtInst:
        case Op.OpEntryPoint:
        case Op.OpTypeStruct:
        case Op.OpTypeFunction:
        case Op.OpConstantComposite:
        case Op.OpSpecConstantComposite:
        case Op.OpFunctionCall:
        case Op.OpAccessChain:
        case Op.OpInBoundsAccessChain:
        case Op.OpPtrAccessChain:
        case Op.OpInBoundsPtrAccessChain:
        case Op.OpGroupDecorate:
        case Op.OpCompositeConstruct:
        case Op.OpEnqueueKernel:
        case Op.OpUntypedAccessChainKHR:
        case Op.OpUntypedInBoundsAccessChainKHR:
        case Op.OpUntypedPtrAccessChainKHR:
        case Op.OpUntypedInBoundsPtrAccessChainKHR:
        case Op.OpExtInstWithForwardRefsKHR:
        case Op.OpFunctionPointerCallINTEL:
        case Op.OpAsmCallINTEL:
        case Op.OpAliasScopeListDeclINTEL:
        case Op.OpTypeStructContinuedINTEL:
        case Op.OpConstantCompositeContinuedINTEL:
        case Op.OpSpecConstantCompositeContinuedINTEL:
        case Op.OpCompositeConstructContinuedINTEL:
            return true;
    }
}

