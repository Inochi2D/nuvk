import json
import tkinter.filedialog
import sys
from typing import *

class SpirvSpecScanner:
    
    """Constructor"""
    def __init__(self, fileName: str) -> None:
        
        # Load JSON
        with open(file=fileName, mode="r") as file:
            self.json = json.load(file)
        
        # Scan instruction list
        self.instructions = self.json["instructions"]
        self.opcodes = dict()
        self.opnames = list[str]()
        for instr in self.instructions:
            self.opnames.append(instr["opname"])
            self.opcodes[instr["opname"]] = instr

    """Gets whether the opcode has a result type"""
    def getHasResultType(self, opcode: str) -> bool:
        if opcode in self.opcodes:
            if "operands" in self.opcodes[opcode]:
                for operand in self.opcodes[opcode]["operands"]:
                    if operand["kind"] == "IdResultType":
                        return True
        return False

    """Gets whether the opcode has a result id"""
    def getHasResult(self, opcode: str) -> bool:
        if opcode in self.opcodes:
            if "operands" in self.opcodes[opcode]:
                for operand in self.opcodes[opcode]["operands"]:
                    if operand["kind"] == "IdResult":
                        return True
        return False
    
    """Gets the class of the operation"""
    def getOpClass(self, opcode: str) -> str:
        if opcode in self.opcodes:
            return self.opcodes[opcode]["class"]
        return "Invalid"
    
    """Gets a list of the opcode names."""
    def getOpNames(self) -> list[str]:
        return self.opnames

class DCodeWriter:
    def __init__(self) -> None:
        self.code = ""
        self.tabs = 0

    def __indent(self, extra: int = 0):
        self.code += "    " * (self.tabs + extra)

    def beginScope(self, line: str) -> None:
        self.__indent()
        self.code += line + "\n"
        self.tabs += 1

    def addLine(self, line: str = "") -> None:
        if len(line) == 0:
            self.__indent()
            self.code += "\n"
        
        for l in line.splitlines(True):
            self.__indent()
            self.code += l + "\n"

    def addLineIndented(self, line: str) -> None:
        self.__indent(1)
        self.code += line + "\n"

    def endScope(self, endChar: str = "}") -> None:
        self.tabs -= 1
        self.__indent()
        self.code += endChar + "\n"
    
    def writeSwitchFunc(self, funcName: str, docComment: str, trueSection: list[str]) -> None:
        self.beginScope("/**")
        self.addLine(docComment)
        self.endScope("*/")
        self.beginScope(f"bool {funcName}(Op code) @nogc {{")
        self.beginScope("switch(code) {")
        self.addLine("")
        
        # True section
        for item in trueSection:
            self.addLine(f"case Op.{item}:")
        self.addLineIndented("return true;")

        self.addLine()
        
        # False section is implicit.
        self.addLine("default:")
        self.addLineIndented("return false;")
        self.endScope()
        self.endScope()
        self.addLine()
        self.addLine()

    def getContent(self) -> str:
        return self.code

if (len(sys.argv) != 3):
    print("gen-spv-reflection.py [source json] [destination D file]")
    exit(-1)

scanner = SpirvSpecScanner(sys.argv[1])
writer = DCodeWriter()

print("Processing, please wait...")

writer.beginScope("/*")
writer.addLine("This code is auto-generated by gen-spv-reflection, do not edit manually.")
writer.endScope("*/")
writer.addLine("module nuvk.spirv.reflection;")
writer.addLine("import nuvk.spirv.spv;")
writer.addLine()

docComments = dict[str, str]()
docComments["isTypeDeclaration"]    = "Gets whether the specified opcode is a type declaration"
docComments["hasResult"]            = "Gets whether the specified opcode has a result item"
docComments["hasResultType"]        = "Gets whether the specified opcode has a result type item"

# Things to write to file
toWrite = dict[str, list[str]]()
toWrite["isTypeDeclaration"] = list[str]()
toWrite["hasResult"] = list[str]()
toWrite["hasResultType"] = list[str]()

for opcode in scanner.getOpNames():
    hasResult = scanner.getHasResult(opcode)
    hasResultType = scanner.getHasResultType(opcode)
    isTypeDecl = scanner.getOpClass(opcode) == "Type-Declaration"

    if isTypeDecl:
        toWrite["isTypeDeclaration"].append(opcode)
    
    if hasResult:
        toWrite["hasResult"].append(opcode)
    
    if hasResultType:
        toWrite["hasResultType"].append(opcode)


for key, opcodes in toWrite.items():
    writer.writeSwitchFunc(key, docComments[key], opcodes)

with open(file=sys.argv[2], mode="w") as file:
    file.write(writer.getContent())

print("Done!")