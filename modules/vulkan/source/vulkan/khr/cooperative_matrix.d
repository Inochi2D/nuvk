/**
 * VK_KHR_cooperative_matrix
 * 
 * Author:
 *     Khronos
 * 
 * Copyright:
 *     Copyright Â© 2015-2025, The Khronos Group Inc.
 * 
 * License: $(LINK2 https://www.apache.org/licenses/LICENSE-2.0, Apache-2.0)
 */
module vulkan.khr.cooperative_matrix;

import numem.core.types : OpaqueHandle;
import vulkan.loader;
import vulkan.core;

extern (System) @nogc nothrow:

version (VK_VERSION_1_4)
    version = VK_VERSION_1_3;
version (VK_VERSION_1_3)
    version = VK_VERSION_1_2;
version (VK_VERSION_1_2)
    version = VK_VERSION_1_1;

version (VK_VERSION_1_1) {} else {
    public import vulkan.khr.get_physical_device_properties2;
}

struct VK_KHR_cooperative_matrix {
    
    @VkProcName("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR")
    PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
}

enum VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = 2;
enum VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix";

struct VkCooperativeMatrixPropertiesKHR {
    VkStructureType sType = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR;
    void* pNext;
    uint MSize;
    uint NSize;
    uint KSize;
    VkComponentTypeKHR AType;
    VkComponentTypeKHR BType;
    VkComponentTypeKHR CType;
    VkComponentTypeKHR ResultType;
    VkBool32 saturatingAccumulation;
    VkScopeKHR scope_;
}

enum VkScopeKHR {
    VK_SCOPE_DEVICE_KHR = 1,
    VK_SCOPE_WORKGROUP_KHR = 2,
    VK_SCOPE_SUBGROUP_KHR = 3,
    VK_SCOPE_QUEUE_FAMILY_KHR = 5,
    VK_SCOPE_DEVICE_NV = VK_SCOPE_DEVICE_KHR,
    VK_SCOPE_WORKGROUP_NV = VK_SCOPE_WORKGROUP_KHR,
    VK_SCOPE_SUBGROUP_NV = VK_SCOPE_SUBGROUP_KHR,
    VK_SCOPE_QUEUE_FAMILY_NV = VK_SCOPE_QUEUE_FAMILY_KHR,
}

enum VK_SCOPE_DEVICE_KHR = VkScopeKHR.VK_SCOPE_DEVICE_KHR;
enum VK_SCOPE_WORKGROUP_KHR = VkScopeKHR.VK_SCOPE_WORKGROUP_KHR;
enum VK_SCOPE_SUBGROUP_KHR = VkScopeKHR.VK_SCOPE_SUBGROUP_KHR;
enum VK_SCOPE_QUEUE_FAMILY_KHR = VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_KHR;
enum VK_SCOPE_DEVICE_NV = VK_SCOPE_DEVICE_KHR;
enum VK_SCOPE_WORKGROUP_NV = VK_SCOPE_WORKGROUP_KHR;
enum VK_SCOPE_SUBGROUP_NV = VK_SCOPE_SUBGROUP_KHR;
enum VK_SCOPE_QUEUE_FAMILY_NV = VK_SCOPE_QUEUE_FAMILY_KHR;

enum VkComponentTypeKHR {
    VK_COMPONENT_TYPE_FLOAT16_KHR = 0,
    VK_COMPONENT_TYPE_FLOAT32_KHR = 1,
    VK_COMPONENT_TYPE_FLOAT64_KHR = 2,
    VK_COMPONENT_TYPE_SINT8_KHR = 3,
    VK_COMPONENT_TYPE_SINT16_KHR = 4,
    VK_COMPONENT_TYPE_SINT32_KHR = 5,
    VK_COMPONENT_TYPE_SINT64_KHR = 6,
    VK_COMPONENT_TYPE_UINT8_KHR = 7,
    VK_COMPONENT_TYPE_UINT16_KHR = 8,
    VK_COMPONENT_TYPE_UINT32_KHR = 9,
    VK_COMPONENT_TYPE_UINT64_KHR = 10,
    VK_COMPONENT_TYPE_BFLOAT16_KHR = 1000141000,
    VK_COMPONENT_TYPE_FLOAT16_NV = VK_COMPONENT_TYPE_FLOAT16_KHR,
    VK_COMPONENT_TYPE_FLOAT32_NV = VK_COMPONENT_TYPE_FLOAT32_KHR,
    VK_COMPONENT_TYPE_FLOAT64_NV = VK_COMPONENT_TYPE_FLOAT64_KHR,
    VK_COMPONENT_TYPE_SINT8_NV = VK_COMPONENT_TYPE_SINT8_KHR,
    VK_COMPONENT_TYPE_SINT16_NV = VK_COMPONENT_TYPE_SINT16_KHR,
    VK_COMPONENT_TYPE_SINT32_NV = VK_COMPONENT_TYPE_SINT32_KHR,
    VK_COMPONENT_TYPE_SINT64_NV = VK_COMPONENT_TYPE_SINT64_KHR,
    VK_COMPONENT_TYPE_UINT8_NV = VK_COMPONENT_TYPE_UINT8_KHR,
    VK_COMPONENT_TYPE_UINT16_NV = VK_COMPONENT_TYPE_UINT16_KHR,
    VK_COMPONENT_TYPE_UINT32_NV = VK_COMPONENT_TYPE_UINT32_KHR,
    VK_COMPONENT_TYPE_UINT64_NV = VK_COMPONENT_TYPE_UINT64_KHR,
    VK_COMPONENT_TYPE_SINT8_PACKED_NV = 1000491000,
    VK_COMPONENT_TYPE_UINT8_PACKED_NV = 1000491001,
    VK_COMPONENT_TYPE_FLOAT_E4M3_NV = VK_COMPONENT_TYPE_FLOAT8_E4M3_EXT,
    VK_COMPONENT_TYPE_FLOAT_E5M2_NV = VK_COMPONENT_TYPE_FLOAT8_E5M2_EXT,
    VK_COMPONENT_TYPE_FLOAT8_E4M3_EXT = 1000491002,
    VK_COMPONENT_TYPE_FLOAT8_E5M2_EXT = 1000491003,
}

enum VK_COMPONENT_TYPE_FLOAT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_KHR;
enum VK_COMPONENT_TYPE_FLOAT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_KHR;
enum VK_COMPONENT_TYPE_FLOAT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_KHR;
enum VK_COMPONENT_TYPE_SINT8_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_KHR;
enum VK_COMPONENT_TYPE_SINT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_KHR;
enum VK_COMPONENT_TYPE_SINT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_KHR;
enum VK_COMPONENT_TYPE_SINT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_KHR;
enum VK_COMPONENT_TYPE_UINT8_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_KHR;
enum VK_COMPONENT_TYPE_UINT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_KHR;
enum VK_COMPONENT_TYPE_UINT32_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_KHR;
enum VK_COMPONENT_TYPE_UINT64_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_KHR;
enum VK_COMPONENT_TYPE_BFLOAT16_KHR = VkComponentTypeKHR.VK_COMPONENT_TYPE_BFLOAT16_KHR;
enum VK_COMPONENT_TYPE_FLOAT16_NV = VK_COMPONENT_TYPE_FLOAT16_KHR;
enum VK_COMPONENT_TYPE_FLOAT32_NV = VK_COMPONENT_TYPE_FLOAT32_KHR;
enum VK_COMPONENT_TYPE_FLOAT64_NV = VK_COMPONENT_TYPE_FLOAT64_KHR;
enum VK_COMPONENT_TYPE_SINT8_NV = VK_COMPONENT_TYPE_SINT8_KHR;
enum VK_COMPONENT_TYPE_SINT16_NV = VK_COMPONENT_TYPE_SINT16_KHR;
enum VK_COMPONENT_TYPE_SINT32_NV = VK_COMPONENT_TYPE_SINT32_KHR;
enum VK_COMPONENT_TYPE_SINT64_NV = VK_COMPONENT_TYPE_SINT64_KHR;
enum VK_COMPONENT_TYPE_UINT8_NV = VK_COMPONENT_TYPE_UINT8_KHR;
enum VK_COMPONENT_TYPE_UINT16_NV = VK_COMPONENT_TYPE_UINT16_KHR;
enum VK_COMPONENT_TYPE_UINT32_NV = VK_COMPONENT_TYPE_UINT32_KHR;
enum VK_COMPONENT_TYPE_UINT64_NV = VK_COMPONENT_TYPE_UINT64_KHR;
enum VK_COMPONENT_TYPE_SINT8_PACKED_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_PACKED_NV;
enum VK_COMPONENT_TYPE_UINT8_PACKED_NV = VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_PACKED_NV;
enum VK_COMPONENT_TYPE_FLOAT_E4M3_NV = VK_COMPONENT_TYPE_FLOAT8_E4M3_EXT;
enum VK_COMPONENT_TYPE_FLOAT_E5M2_NV = VK_COMPONENT_TYPE_FLOAT8_E5M2_EXT;
enum VK_COMPONENT_TYPE_FLOAT8_E4M3_EXT = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT8_E4M3_EXT;
enum VK_COMPONENT_TYPE_FLOAT8_E5M2_EXT = VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT8_E5M2_EXT;

struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    VkStructureType sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR;
    void* pNext;
    VkBool32 cooperativeMatrix;
    VkBool32 cooperativeMatrixRobustBufferAccess;
}

struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    VkStructureType sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR;
    void* pNext;
    VkFlags cooperativeMatrixSupportedStages;
}

alias PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = VkResult function(
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkCooperativeMatrixPropertiesKHR* pProperties,
);
