DLSL:

# Module Scope
Module              < (Comment / %DeclGlobal)+ eoi

# Attributes
AttribList          < %(AttribUDA / AttribBuiltin)*
AttribUDA           <- :'@' identifier ;ParamList(Expr)?
AttribBuiltin       <- ('in' / 'out' / 'const' / 'mediump' / 'highp' / 'lowp') :blank

# Declarations
DeclGlobal          < DeclImport / (AttribList? (DeclStruct / %DeclVar / DeclFunc))
DeclFuncLocal       < DeclImport / (AttribList? (%DeclVar))
DeclStruct          < :'struct' Identifier Block(AttribList? %DeclVar)
DeclVar             < (DeclVarArray / DeclVarSingle) eos
DeclVarSingle       < %Type Identifier ('=' Expr)?
DeclVarArray        < TypeArray Identifier (('=' ExprArrayAssign) / ';')
DeclImport          < :'import' %List(identifier, '.') eos

# Functions
DeclFunc            < %Type Identifier ParamList(FuncParam) Block(%FuncBody)
FuncParam           < (AttribList? %Type Identifier)
FuncBody            < (%Stmt)*

# Base Items
eos                 <: ';'
Comment             <  ;CommentDoc / :(CommentSingleLine / CommentMultiLine)
CommentSingleLine   <- :'//' ~(!endOfLine .)*
CommentMultiLine    <- :'/*' ~(!"*/" .)* :'*/'
CommentDoc          <- :'/**' ~(!"*/" .)* :'*/'

# Types
Type                < (TypeBasic / TypeVector / TypeMatrix / TypeBasic / TypeOpaque / TypeUserDefined)
TypeArray           <- %Type :'[' ;Integer? :']'
TypeVector          <- (
    'bvec2' / 'bvec3' / 'bvec4' / 
    'ivec2' / 'ivec3' / 'ivec4' / 
    'uvec2' / 'uvec3' / 'uvec4' / 
    'dvec2' / 'dvec3' / 'dvec4' / 
    'vec2'  / 'vec3'  /  'vec4'
)

TypeMatrix          <- (
    'dmat4x4' / 'dmat3x4' / 'dmat2x4' /
    'dmat4x3' / 'dmat3x3' / 'dmat2x3' /
    'dmat4x2' / 'dmat3x2' / 'dmat2x2' /
     'mat4x4' /  'mat3x4' /  'mat2x4' /
     'mat4x3' /  'mat3x3' /  'mat2x3' /
     'mat4x2' /  'mat3x2' /  'mat2x2' /
      'dmat4' /   'dmat3' /   'dmat2' /
       'mat4' /    'mat3' /    'mat2'
)
TypeBasic           <- 'float' / 'double' / 'uint' / 'int' / 'bool' 
TypeOpaque          <- 'texture' /  'sampler2DShadow' / 'sampler1D' / 'sampler2D' / 'sampler3D' / 'samplerCube' 
TypeUserDefined     <- identifier :spacing+


# Identifiers
Identifier          <~ (identifier :spacing+)
IdentifierList      <- List(~(identifier :spacing+), '.')

# Constants
Integer             <- ~([0-9]+) !('.' / 'f')
Number              <- ~(([0-9]+) ('.' [0-9]+)?) :'f'?
True                <~ "true"
False               <~ "false"

# Blocks and parameters
Block(ChildT)       < :'{' (Comment? %ChildT Comment?)* :'}'
ParamList(ListT)    < :'(' %OptList(ListT, ',') :')'
ForeachPList        < :'(' (%Type Identifier / Identifier) :';' ForeachRange :')'
ForeachRange        < (Expr :'..' Expr) / Expr
ForPList            < :'(' StmtDecl :';' Expr :'..' StmtAssign :')'

# Statements
Stmt                <  %(StmtIf / StmtForeach / StmtFor / StmtReturn / StmtDiscard / StmtDecl / StmtAssign / StmtExpr)
StmtDecl            <  %DeclFuncLocal
StmtAssign          <  IdentifierList :'=' Expr eos
StmtExpr            <  Expr eos
StmtReturn          <^ :'return' Expr? eos
StmtDiscard         <^ :'discard' eos
StmtIf              <  :'if' ParamList(Expr) Block(Stmt)
StmtForeach         <  :'foreach' ForeachPList Block(Stmt)
StmtFor             <  :'for' ForPList Block(Stmt)

# Expressions
Expr                < ExprCompare / ExprTerm
ExprCompare         < ExprTerm ('!=' / '==' / '>=' / '<=' / '>' / '<') ExprTerm
ExprTerm            < ExprFact (ExprAdd / ExprSub / ExprCompare)*
ExprAdd             < :'+' Expr
ExprSub             < :'-' Expr
ExprFact            < ExprPrimary (ExprMul / ExprDiv)*
ExprMul             < :'*' ExprPrimary
ExprDiv             < :'/' ExprPrimary
ExprPrimary         < (ExprParens / ExprRange / ExprIndex / ExprNeg / ExprPos / ExprNot / Integer / Number / True / False / ExprIden)
ExprParens          < :'(' Expr :')'
ExprNeg             < :'-' ExprPrimary
ExprPos             < :'+' ExprPrimary
ExprNot             < :'!' ExprPrimary
ExprIndex           < :'[' ExprPrimary :']'
ExprRange           < :'[' ExprPrimary :'..' ExprPrimary :']'

# Variable/function access
ExprIden            < ExprCall / ExprVar 
ExprVar             < IdentifierList (:'[' Expr :']')?
ExprCall            < IdentifierList ParamList(Expr)

# Special Expressions
ExprArrayAssign     < :'[' List(Expr, ',') :']'

# Utilities

# List that allows 0 or more elements
OptList(Elem, Sep)  <- Elem? ((:Sep Elem) / :Sep)*

# List that allows 1 or more elements
List(Elem, Sep)     <- Elem ((:Sep Elem) / :Sep)*